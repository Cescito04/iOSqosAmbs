androidx.window.layout.HardwareFoldingFeature$Companion
androidx.window.layout.SidecarCompat$TranslatingCallback
androidx.work.impl.workers.CombineContinuationsWorker
dev.fluttercommunity.workmanager.BackgroundWorker
id.flutter.flutter_background_service.Config
androidx.savedstate.SavedStateRegistry$1
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer
androidx.window.embedding.SplitController$Companion
id.flutter.flutter_background_service.R$layout
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM
androidx.versionedparcelable.CustomVersionedParcelable
androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryChargingProxy
id.flutter.flutter_background_service.R$string
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer
android.support.v4.media.session.MediaSessionCompat$Token
io.flutter.view.TextureRegistry$SurfaceProducer
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation
androidx.media.AudioAttributesCompatParcelizer
androidx.room.MultiInstanceInvalidationService
android.support.v4.media.MediaMetadataCompat
com.google.android.gms.auth.api.signin.GoogleSignInOptions
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
com.dexterous.flutterlocalnotifications.ActionBroadcastReceiver
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory
com.google.android.gms.auth.api.credentials.Credential
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE
com.dexterous.flutterlocalnotifications.models.DateTimeComponents
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
io.flutter.plugins.GeneratedPluginRegistrant
io.flutter.plugins.urllauncher.WebViewActivity
androidx.window.layout.WindowInfoTracker$Companion
androidx.media.AudioAttributesImplApi21Parcelizer
androidx.work.impl.foreground.SystemForegroundService
androidx.work.WorkManagerInitializer
com.google.firebase.concurrent.ExecutorsRegistrar
androidx.window.java.R
com.google.firebase.components.ComponentDiscoveryService
androidx.core.app.RemoteActionCompat
androidx.core.app.CoreComponentFactory
androidx.activity.ComponentActivity$3
android.support.v4.media.RatingCompat
id.flutter.flutter_background_service.R
androidx.versionedparcelable.ParcelImpl
androidx.window.layout.DisplayFeature
com.google.android.gms.maps.GoogleMapOptions
id.flutter.flutter_background_service.R$dimen
com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl
io.flutter.plugins.googlemaps.GoogleMapController
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA
androidx.window.embedding.SplitController
io.flutter.view.TextureRegistry$ImageConsumer
androidx.window.layout.WindowMetricsCalculator$Companion
androidx.lifecycle.SingleGeneratedAdapterObserver
androidx.window.embedding.SplitInfo
androidx.work.impl.background.systemalarm.RescheduleReceiver
com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA
io.flutter.view.FlutterCallbackInformation
androidx.window.embedding.EmptyEmbeddingComponent
id.flutter.flutter_background_service.BackgroundService
com.sumanrajpathak.flutter_cell_info.models.SIMInfo
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
androidx.work.impl.background.systemjob.SystemJobService
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction
androidx.window.layout.WindowBackend
androidx.window.layout.SidecarWindowBackend
com.google.firebase.FirebaseCommonRegistrar
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl
androidx.work.impl.background.systemalarm.SystemAlarmService
com.dexterous.flutterlocalnotifications.models.SoundSource
android.support.v4.media.AudioAttributesImplApi21Parcelizer
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation
com.google.android.gms.auth.api.credentials.HintRequest
androidx.work.impl.workers.DiagnosticsWorker
androidx.window.embedding.EmbeddingTranslatingCallback
androidx.fragment.app.Fragment$2
com.sumanrajpathak.flutter_cell_info.models.CellsResponse
androidx.window.embedding.SplitPairRule
com.dexterous.flutterlocalnotifications.models.PersonDetails
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation
com.dexterous.flutterlocalnotifications.models.NotificationAction
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR
vn.hunghd.flutterdownloader.DownloadWorker
androidx.window.layout.SidecarCompat$Companion
android.support.v4.graphics.drawable.IconCompatParcelizer
android.support.v4.media.AudioAttributesImplApi26Parcelizer
androidx.lifecycle.DefaultLifecycleObserver
androidx.window.layout.WindowMetricsCalculator
com.sumanrajpathak.flutter_cell_info.models.SIMInfoResponse
androidx.window.layout.WindowInfoTracker
androidx.lifecycle.FullLifecycleObserverAdapter
com.lyokone.location.FlutterLocationService
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2
androidx.work.impl.utils.ForceStopRunnable$BroadcastReceiver
com.google.android.gms.auth.api.signin.GoogleSignInAccount
androidx.window.layout.WindowMetricsCalculatorDecorator
com.google.android.gms.auth.api.signin.internal.SignInHubActivity
androidx.window.layout.FoldingFeature$State
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper
com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA
com.google.firebase.ktx.FirebaseCommonKtxRegistrar
androidx.work.Worker
com.google.android.gms.auth.api.signin.RevocationBoundService
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1
androidx.lifecycle.LiveData$LifecycleBoundObserver
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1
kotlinx.coroutines.internal.StackTraceRecoveryKt
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar
com.google.android.gms.common.api.GoogleApiActivity
androidx.window.R$id
androidx.media.AudioAttributesImplBaseParcelizer
androidx.startup.InitializationProvider
com.dexterous.flutterlocalnotifications.models.BitmapSource
androidx.window.layout.SidecarCompat$DistinctElementCallback
com.google.android.gms.common.util.DynamiteApi
androidx.work.OverwritingInputMerger
com.google.android.gms.location.LocationRequest
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
com.google.android.gms.auth.api.signin.SignInAccount
com.google.android.gms.common.api.internal.BasePendingResult
io.flutter.view.AccessibilityViewEmbedder
androidx.window.core.Version$bigInteger$2
android.support.v4.media.AudioAttributesCompatParcelizer
io.flutter.embedding.engine.FlutterJNI
androidx.window.layout.SidecarWindowBackend$Companion
androidx.window.embedding.SplitPairFilter
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver
com.google.android.gms.common.internal.ReflectedParcelable
androidx.window.embedding.EmbeddingInterfaceCompat
androidx.window.core.Version$Companion
android.support.v4.media.MediaBrowserCompat$ItemReceiver
androidx.window.layout.WindowLayoutInfo
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation
androidx.window.embedding.ActivityRule
androidx.window.embedding.ExtensionEmbeddingBackend$Companion
androidx.window.layout.WindowMetrics
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR
kotlin.coroutines.jvm.internal.BaseContinuationImpl
com.sumanrajpathak.flutter_cell_info.models.common.Band
android.support.v4.app.RemoteActionCompatParcelizer
androidx.window.layout.ExtensionInterfaceCompat
androidx.window.layout.WindowMetricsCalculatorCompat
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter
android.support.v4.media.session.PlaybackStateCompat
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA
androidx.window.layout.FoldingFeature$Orientation
androidx.core.graphics.drawable.IconCompatParcelizer
com.dexterous.flutterlocalnotifications.utils.BooleanUtils
androidx.window.layout.WindowInfoTrackerDecorator
androidx.activity.ComponentActivity$2
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry
id.flutter.flutter_background_service.R$attr
androidx.window.R$styleable
io.flutter.embedding.engine.FlutterOverlaySurface
androidx.window.layout.DisplayCompatHelperApi28
androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryNotLowProxy
com.google.android.gms.auth.api.credentials.IdToken
com.sumanrajpathak.flutter_cell_info.models.common.Network
androidx.window.embedding.SplitRule$Api30Impl
com.example.qosambassadors.MainActivity
androidx.window.embedding.ActivityStack
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1
id.flutter.flutter_background_service.Pipe
androidx.window.layout.SidecarCompat$FirstAttachAdapter
com.sumanrajpathak.flutter_cell_info.models.CellsTypeList
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1
com.google.android.gms.auth.api.signin.internal.SignInConfiguration
android.support.v4.media.AudioAttributesImplBaseParcelizer
android.support.v4.media.MediaBrowserCompat$MediaItem
com.google.android.gms.common.annotation.KeepName
androidx.window.layout.WindowInfoTrackerImpl
android.support.v4.media.session.MediaSessionCompat$QueueItem
com.google.firebase.FirebaseCommonKtxRegistrar
androidx.window.embedding.EmbeddingBackend
androidx.window.layout.WindowInfoTrackerImpl$Companion
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver
com.google.android.gms.common.api.internal.LifecycleCallback
com.dexterous.flutterlocalnotifications.utils.StringUtils
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface
com.google.android.gms.common.GooglePlayServicesIncorrectManifestValueException
androidx.window.layout.ActivityCompatHelperApi24
androidx.media.AudioAttributesImplBase
io.flutter.view.TextureRegistry$SurfaceTextureEntry
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1
id.flutter.flutter_background_service.Pipe$PipeListener
androidx.window.embedding.SplitRule
androidx.annotation.Keep
androidx.window.embedding.EmbeddingAdapter
androidx.window.core.ExperimentalWindowApi
com.dexterous.flutterlocalnotifications.models.MessageDetails
id.flutter.flutter_background_service.BootReceiver
androidx.work.impl.WorkDatabase
id.flutter.flutter_background_service.R$drawable
com.google.android.gms.maps.model.LatLngBounds
androidx.window.layout.FoldingFeature
id.flutter.flutter_background_service.WatchdogReceiver
androidx.work.impl.workers.ConstraintTrackingWorker
com.google.firebase.components.ComponentRegistrar
id.flutter.flutter_background_service.R$id
id.flutter.flutter_background_service.R$styleable
android.support.v4.media.MediaDescriptionCompat
androidx.window.embedding.MatcherUtils
com.dexterous.flutterlocalnotifications.models.ScheduleMode
com.baseflow.geolocator.GeolocatorLocationService
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver
androidx.window.core.Version
androidx.work.WorkerParameters
androidx.core.app.RemoteActionCompatParcelizer
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails
androidx.window.embedding.SplitRule$LayoutDir
androidx.window.R
androidx.work.ArrayCreatingInputMerger
com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE
androidx.work.impl.diagnostics.DiagnosticsReceiver
androidx.work.impl.background.systemalarm.ConstraintProxy$StorageNotLowProxy
androidx.window.layout.ActivityCompatHelperApi30
com.google.android.gms.common.GooglePlayServicesManifestException
androidx.lifecycle.ReflectiveGenericLifecycleObserver
androidx.window.layout.EmptyDecorator
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation
androidx.window.layout.SidecarAdapter$Companion
androidx.window.core.Bounds
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver
androidx.lifecycle.CompositeGeneratedAdaptersObserver
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback
com.dexterous.flutterlocalnotifications.models.NotificationStyle
com.google.android.gms.auth.api.credentials.CredentialPickerConfig
com.dexterous.flutterlocalnotifications.models.IconSource
androidx.window.layout.FoldingFeature$OcclusionType$Companion
androidx.media.AudioAttributesImplApi26Parcelizer
androidx.window.layout.SidecarAdapter
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA
androidx.window.layout.FoldingFeature$Orientation$Companion
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface
io.flutter.plugins.firebase.core.FlutterFirebasePlugin
androidx.window.embedding.EmbeddingCompat
androidx.media.AudioAttributesImplApi21
androidx.window.R$attr
androidx.window.layout.ExtensionWindowLayoutInfoBackend
androidx.browser.browseractions.BrowserActionsFallbackMenuView
io.flutter.view.TextureRegistry$ImageTextureEntry
androidx.window.layout.HardwareFoldingFeature$Type$Companion
androidx.window.embedding.ExtensionEmbeddingBackend
com.google.android.gms.common.api.Status
androidx.window.embedding.SplitPlaceholderRule
android.support.v4.media.session.ParcelableVolumeInfo
com.google.android.gms.common.api.Scope
com.google.android.gms.maps.model.CameraPosition
com.dexterous.flutterlocalnotifications.models.RepeatInterval
androidx.window.embedding.EmbeddingCompat$Companion
id.flutter.flutter_background_service.BuildConfig
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin
androidx.core.graphics.drawable.IconCompat
androidx.window.layout.HardwareFoldingFeature$Type
androidx.window.layout.SidecarCompat
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency
android.support.v4.media.session.PlaybackStateCompat$CustomAction
androidx.activity.ImmLeaksCleaner
io.flutter.plugin.platform.SingleViewPresentation
androidx.work.impl.background.systemalarm.ConstraintProxyUpdateReceiver
androidx.media.AudioAttributesImplApi26
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver
kotlinx.coroutines.android.AndroidDispatcherFactory
androidx.work.impl.background.systemalarm.ConstraintProxy$NetworkStateProxy
com.google.firebase.provider.FirebaseInitProvider
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR
androidx.media.AudioAttributesImpl
androidx.window.layout.FoldingFeature$State$Companion
androidx.window.embedding.EmbeddingRule
id.flutter.flutter_background_service.BackgroundService$1
com.sumanrajpathak.flutter_cell_info.models.CellType
com.dexterous.flutterlocalnotifications.models.Time
androidx.lifecycle.Lifecycling$1
androidx.window.layout.DisplayCompatHelperApi17
com.google.android.gms.location.LocationResult
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException
com.sumanrajpathak.flutter_cell_info.models.CellData
androidx.window.layout.FoldingFeature$OcclusionType
androidx.savedstate.Recreator
id.flutter.flutter_background_service.R$integer
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper
com.dexterous.flutterlocalnotifications.models.NotificationDetails
id.flutter.flutter_background_service.R$style
com.google.android.gms.location.LocationAvailability
com.google.android.gms.maps.model.LatLng
androidx.window.embedding.SplitRuleParser
androidx.window.layout.HardwareFoldingFeature
com.sumanrajpathak.flutter_cell_info.models.common.Cell
id.flutter.flutter_background_service.R$color
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1
androidx.media.AudioAttributesCompat
com.google.maps.android.ui.RotationLayout
androidx.work.impl.WorkDatabase_Impl
androidx.window.embedding.ActivityFilter
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1
com.sumanrajpathak.flutter_cell_info.models.common.Signal
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource DrawableResource
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_MESSAGE
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat embeddingExtension
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_DETAILS
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType FULL
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: int timingAdvance
com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA: int downlinkUarfcn
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_startX
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_30
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener imeVisibleListener
androidx.work.impl.utils.futures.AbstractFuture$Waiter: androidx.work.impl.utils.futures.AbstractFuture$Waiter next
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_15
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PAYLOAD
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_RED
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_10
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA signalCDMA
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String MANUFACTURER
androidx.window.embedding.SplitPlaceholderRule: java.util.Set filters
com.google.android.gms.maps.model.PolylineOptions: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Default
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PAYLOAD
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend$Companion Companion
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String FULL_SCREEN_INTENT
com.google.android.gms.auth.api.signin.internal.SignInConfiguration: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_MIME_TYPE
androidx.work.impl.utils.futures.AbstractFuture$Waiter: java.lang.Thread thread
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: int mcc
id.flutter.flutter_background_service.R$id: int notification_background
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int ssSinr
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String CPU_ABI2
id.flutter.flutter_background_service.R$attr: int font
id.flutter.flutter_background_service.R$dimen: int notification_large_icon_height
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl splitInfoEmbeddingCallback
id.flutter.flutter_background_service.R$id: int edit_text_id
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval Hourly
com.google.android.gms.maps.model.StrokeStyle: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ICON
android.support.v4.media.MediaMetadataCompat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelName
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter sidecarAdapter
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.String cgi
kotlin.jvm.internal.Lambda: int arity
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $VALUES
id.flutter.flutter_background_service.R$id: int icon_group
androidx.window.embedding.SplitPairFilter: java.lang.String secondaryActivityIntentAction
id.flutter.flutter_background_service.R$id: int tag_unhandled_key_listeners
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean chronometerCountDown
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer day
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer importance
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.concurrent.locks.ReentrantLock lock
com.google.android.gms.common.internal.zat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MESSAGES
id.flutter.flutter_background_service.R$layout: int notification_action
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CALLBACK_HANDLE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_BLUE
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
id.flutter.flutter_background_service.BackgroundService: id.flutter.flutter_background_service.Config config
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfWeekAndTime
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatLines
com.dexterous.flutterlocalnotifications.models.PersonDetails: com.dexterous.flutterlocalnotifications.models.IconSource iconBitmapSource
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VIBRATION_PATTERN
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0
androidx.window.embedding.ExtensionEmbeddingBackend: java.lang.String TAG
com.sumanrajpathak.flutter_cell_info.models.common.Signal: int dbm
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.internal.zas resultGuardian
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_APP_LAUNCH_DETAILS_METHOD
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarCompat$Companion Companion
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.Boolean groupConversation
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String id
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String INPUTS
com.google.android.gms.maps.model.StyleSpan: android.os.Parcelable$Creator CREATOR
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State FLAT
com.google.android.gms.maps.model.MapStyleOptions: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: long createdAt
id.flutter.flutter_background_service.R$styleable: int ActivityFilter_activityName
id.flutter.flutter_background_service.BackgroundService: java.lang.String LOCK_NAME
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.RepeatInterval repeatInterval
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelId
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$Companion Companion
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA signalWCDMA
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_5
com.sumanrajpathak.flutter_cell_info.models.CellData: int bandChannelNumber
com.google.android.gms.maps.model.LatLngBounds: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator$Companion$reset$1 INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LINES
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Messaging
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String bigText
com.sumanrajpathak.flutter_cell_info.models.CellData: int bandDownlinkArfcn
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer hour
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_METHOD
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend globalInstance
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String HOUR
kotlin.jvm.internal.CallableReference: boolean isTopLevel
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String DESCRIPTION
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
com.google.android.gms.signin.internal.zai: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND_SOURCE
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatSummaryText
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NAME
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String SECOND
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource RawResource
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderPackage
id.flutter.flutter_background_service.R$layout: int ime_base_split_test_activity
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: io.flutter.plugin.common.MethodChannel channel
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$drawable: int ic_call_decline_low
com.sumanrajpathak.flutter_cell_info.models.SIMInfoResponse: java.util.List simInfoList
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer ncc
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
com.google.android.gms.maps.model.PatternItem: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedWidth
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT_TITLE
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController globalInstance
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ID
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLAY_SOUND
androidx.window.embedding.ActivityStack: java.util.List activities
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Double lon
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_ALERT_BEHAVIOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_BIG_PICTURE_ERROR_CODE
androidx.work.impl.utils.futures.AbstractFuture: androidx.work.impl.utils.futures.AbstractFuture$Listener listeners
id.flutter.flutter_background_service.R$id: int tag_on_receive_content_mime_types
id.flutter.flutter_background_service.R$layout: int notification_action_tombstone
id.flutter.flutter_background_service.R$attr: int secondaryActivityName
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage lastProducedImage
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_ALPHA
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
kotlinx.coroutines.CompletedExceptionally: int _handled
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
android.support.v4.media.session.PlaybackStateCompat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_DRAWABLE_RESOURCE_ERROR_MESSAGE
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ICON_SOURCE
androidx.window.R$attr: int splitRatio
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int rscpAsu
androidx.window.core.Version: androidx.window.core.Version$Companion Companion
id.flutter.flutter_background_service.R$styleable: int Capability_queryPatterns
com.google.android.gms.internal.location.zze: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_centerColor
com.google.android.gms.auth.api.credentials.CredentialPickerConfig: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$id: int tag_accessibility_heading
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_GROUP_METHOD
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer minute
id.flutter.flutter_background_service.R$dimen: int compat_control_corner_material
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MATCH_DATE_TIME_COMPONENTS
com.sumanrajpathak.flutter_cell_info.models.CellData: int bitErrorRate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SILENT
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA bandWCDMA
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String HARDWARE
androidx.window.embedding.EmbeddingCompat: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingExtension
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack primaryActivityStack
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String payload
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter next
androidx.window.layout.SidecarCompat$FirstAttachAdapter: java.lang.ref.WeakReference activityWeakReference
androidx.window.layout.WindowInfoTracker$Companion: java.lang.String TAG
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean onlyAlertOnce
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitRatio
id.flutter.flutter_background_service.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ALL_METHOD
com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE: int downlinkEarfcn
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONTENT_TITLE
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR: int downlinkFrequency
androidx.window.embedding.ActivityFilter: android.content.ComponentName componentName
io.flutter.embedding.engine.FlutterJNI: float displayDensity
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList windowLayoutChangeCallbacks
androidx.window.core.Bounds: int bottom
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUMMARY_TEXT
kotlinx.coroutines.internal.LimitedDispatcher: int runningWorkers
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer groupAlertBehavior
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer cid
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATION_MESSAGING_STYLE_ERROR_CODE
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: android.os.Handler mainHandler
androidx.window.layout.WindowLayoutInfo: java.util.List displayFeatures
id.flutter.flutter_background_service.R$dimen: int notification_top_pad
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer tac
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_27
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int NOTIFICATION_PERMISSION_REQUEST_CODE
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String description
com.sumanrajpathak.flutter_cell_info.models.common.Band: int channelNumber
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int rscpAsu
id.flutter.flutter_background_service.R$id: int action_text
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ALLOW_GENERATED_REPLIES
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State$Companion Companion
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatBody
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator$Companion $$INSTANCE
androidx.window.R$attr: int primaryActivityName
com.sumanrajpathak.flutter_cell_info.models.CellData: int cqi
androidx.window.embedding.SplitPairFilter: android.content.ComponentName primaryActivityName
androidx.window.core.Bounds: int top
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer lac
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Object icon
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String EXACT_ALARMS_PERMISSION_ERROR_CODE
androidx.window.embedding.SplitController: java.util.Set staticSplitRules
id.flutter.flutter_background_service.R$drawable: int notification_template_icon_bg
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Integer titleColor
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM bandGSM
androidx.window.R$id: int rtl
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatSummaryText
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer sid
id.flutter.flutter_background_service.R$id: int icon
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String name
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Long nci
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.StyleInformation styleInformation
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ByteArray
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.List actions
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Inbox
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.util.List actionInputs
id.flutter.flutter_background_service.BackgroundService: io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint dartEntrypoint
id.flutter.flutter_background_service.R$integer: int status_bar_notification_info_maxnum
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUB_TEXT
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String RELEASE
kotlinx.coroutines.CancelledContinuation: int _resumed
id.flutter.flutter_background_service.R$dimen: int notification_action_text_size
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_ALPHA
androidx.window.core.Version: int minor
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: io.flutter.plugin.common.MethodChannel channel
com.google.android.gms.common.internal.zzk: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1 INSTANCE
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String PRODUCT
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$Companion Companion
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_CODE
com.sumanrajpathak.flutter_cell_info.models.CellData: int rssi
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_GREEN
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean released
androidx.window.embedding.SplitRule$Api30Impl: androidx.window.embedding.SplitRule$Api30Impl INSTANCE
kotlin.jvm.internal.CallableReference: java.lang.Object receiver
com.google.android.gms.maps.model.VisibleRegion: android.os.Parcelable$Creator CREATOR
androidx.window.R$styleable: int[] ActivityFilter
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_24
id.flutter.flutter_background_service.R$styleable: int GradientColorItem_android_offset
id.flutter.flutter_background_service.R$attr: int placeholderActivityName
id.flutter.flutter_background_service.R$id: int text
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
id.flutter.flutter_background_service.R$drawable: int notification_bg_low_normal
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean bot
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INPUT_RESULT
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String SHOWS_USER_INTERFACE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON_BITMAP_SOURCE
androidx.window.embedding.ActivityStack: boolean isEmpty
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_9
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1: id.flutter.flutter_background_service.FlutterBackgroundServicePlugin this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.os.Handler onImageAvailableHandler
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_METHOD
id.flutter.flutter_background_service.WatchdogReceiver: int QUEUE_REQUEST_ID
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int rscp
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String name
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double lat
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_RAW_RESOURCE_ERROR_MESSAGE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_VIBRATION
io.flutter.plugin.platform.SingleViewPresentation: int viewId
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOnMs
com.sumanrajpathak.flutter_cell_info.models.common.Band: java.lang.String name
com.google.android.gms.location.LocationRequest: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
androidx.window.embedding.SplitController: androidx.window.embedding.EmbeddingBackend embeddingBackend
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type FOLD
com.google.android.gms.auth.api.credentials.IdToken: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ActivityRule: java.util.Set filters
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval Weekly
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_NAME
id.flutter.flutter_background_service.R$id: int hide_ime_id
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface callback
androidx.window.core.Version: int patch
id.flutter.flutter_background_service.R$attr: int splitMinWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String icon
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: androidx.window.embedding.ExtensionEmbeddingBackend this$0
kotlinx.coroutines.InvokeOnCancelling: int _invoked
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String description
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
id.flutter.flutter_background_service.R$styleable: int[] GradientColorItem
id.flutter.flutter_background_service.BackgroundService: java.util.concurrent.atomic.AtomicBoolean isRunning
id.flutter.flutter_background_service.R$attr: int clearTop
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_12
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_URI
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_7
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM gsm
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.concurrent.locks.ReentrantLock lock
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataUri
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA bandTDSCDMA
id.flutter.flutter_background_service.R$id: int italic
id.flutter.flutter_background_service.R$dimen: int notification_main_column_padding_top
id.flutter.flutter_background_service.R$id: int line3
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOffMs
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo lastInfo
id.flutter.flutter_background_service.R$attr: int finishSecondaryWithPrimary
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double latitude
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERMISSION_REQUEST_IN_PROGRESS_ERROR_MESSAGE
androidx.window.core.Version: androidx.window.core.Version VERSION_1_0
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.ExtensionsWindowLayoutInfoAdapter INSTANCE
id.flutter.flutter_background_service.R$attr: int splitMinSmallestWidth
android.support.v4.media.session.PlaybackStateCompat$CustomAction: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_VIBRATION
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String body
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityName
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_2
com.sumanrajpathak.flutter_cell_info.models.CellData: double cdmaEcio
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation completion
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock globalLock
com.google.android.gms.maps.model.Tile: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.channels.BufferedChannel: long receivers
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitRatio
id.flutter.flutter_background_service.R$color: int call_notification_answer_color
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.WeakHashMap mActivityWindowLayoutInfo
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_ttcIndex
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: java.util.List cellDataList
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String key
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_android_color
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer number
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource BitmapFilePath
id.flutter.flutter_background_service.R$attr: int fontProviderSystemFontFamily
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.concurrent.locks.ReentrantLock multicastConsumerLock
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode[] $VALUES
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean released
id.flutter.flutter_background_service.BackgroundService: io.flutter.plugin.common.MethodChannel methodChannel
androidx.window.core.Bounds: int right
id.flutter.flutter_background_service.BackgroundService$1: id.flutter.flutter_background_service.BackgroundService this$0
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
androidx.window.layout.EmptyDecorator: androidx.window.layout.EmptyDecorator INSTANCE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String REQUEST_NOTIFICATIONS_PERMISSION_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean ongoing
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String DISPLAY
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLATFORM_SPECIFICS
kotlinx.coroutines.internal.Segment: int cleanedAndPointers
id.flutter.flutter_background_service.R$id: int tag_window_insets_animation_callback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String tag
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String METHOD_CHANNEL
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation VERTICAL
id.flutter.flutter_background_service.R$dimen: int compat_notification_large_icon_max_height
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatTitle
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long when
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON_SOURCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean playSound
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer pci
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: com.sumanrajpathak.flutter_cell_info.models.nr.BandNR bandNR
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderFetchTimeout
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _next
androidx.window.R$styleable: int SplitPairRule_splitRatio
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String WHEN
id.flutter.flutter_background_service.R$drawable: int notification_icon_background
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfMonthAndTime
androidx.window.R$styleable: int SplitPairFilter_primaryActivityName
androidx.window.layout.ActivityCompatHelperApi30: androidx.window.layout.ActivityCompatHelperApi30 INSTANCE
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource Uri
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_android_alpha
androidx.window.core.Version: androidx.window.core.Version VERSION_0_1
androidx.window.embedding.MatcherUtils: java.lang.String sMatchersTag
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TITLE
id.flutter.flutter_background_service.R$string: int call_notification_answer_action
id.flutter.flutter_background_service.R$id: int accessibility_action_clickable_span
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String sound
id.flutter.flutter_background_service.BackgroundService: int notificationId
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_31
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String CANCEL_NOTIFICATION
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERIODICALLY_SHOW_METHOD
androidx.window.embedding.SplitPairRule: boolean clearTop
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean playSound
androidx.window.layout.ActivityCompatHelperApi24: androidx.window.layout.ActivityCompatHelperApi24 INSTANCE
id.flutter.flutter_background_service.BuildConfig: java.lang.String BUILD_TYPE
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
id.flutter.flutter_background_service.BackgroundService: id.flutter.flutter_background_service.Pipe$PipeListener listener
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String timeZoneName
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $VALUES
androidx.window.core.Bounds: int left
id.flutter.flutter_background_service.R$dimen: int notification_top_pad_large_text
id.flutter.flutter_background_service.R$id: int tag_on_receive_content_listener
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String shortcutId
com.google.android.gms.auth.api.signin.SignInAccount: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$dimen: int notification_right_side_padding_top
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: android.app.Activity activity
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode exact
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DEFAULT_ICON
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String REQUEST_EXACT_ALARMS_PERMISSION_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String USES_CHRONOMETER
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation$Companion Companion
id.flutter.flutter_background_service.R$style: int Widget_Compat_NotificationActionContainer
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $VALUES
androidx.window.core.Version: int major
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer lac
id.flutter.flutter_background_service.R$attr: int primaryActivityName
id.flutter.flutter_background_service.R$dimen: int compat_button_padding_vertical_material
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.Set readersToClose
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
androidx.window.R$styleable: int SplitPlaceholderRule_splitRatio
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer cid
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
id.flutter.flutter_background_service.R$dimen: int notification_large_icon_width
id.flutter.flutter_background_service.R$id: int line1
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String connectionStatus
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_WHEN
id.flutter.flutter_background_service.R$string: int status_bar_notification_info_overflow
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Pipe servicePipe
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_lStar
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type HINGE
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
kotlinx.coroutines.selects.SelectImplementation: java.lang.Object state
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer ci
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Integer nid
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress permissionRequestProgress
id.flutter.flutter_background_service.R$dimen: int compat_button_padding_horizontal_material
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: java.lang.String TAG
androidx.window.embedding.SplitRule: int layoutDirection
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_LIGHTS
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ContentUri
id.flutter.flutter_background_service.BackgroundService: java.lang.String notificationTitle
com.sumanrajpathak.flutter_cell_info.models.CellData: double rsrq
androidx.window.layout.SidecarCompat: java.util.Map windowListenerRegisteredContexts
com.google.android.gms.maps.model.TileOverlayOptions: android.os.Parcelable$Creator CREATOR
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent placeholderIntent
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MAX_PROGRESS
id.flutter.flutter_background_service.R$id: int rtl
com.google.android.gms.maps.model.Cap: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: java.util.Map registeredPlugins
id.flutter.flutter_background_service.BackgroundService: java.lang.String notificationChannelId
id.flutter.flutter_background_service.R$styleable: int[] SplitPlaceholderRule
kotlin.jvm.internal.CallableReference: java.lang.String signature
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_BLUE
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction Update
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer second
androidx.window.embedding.SplitPairRule: java.util.Set filters
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
com.sumanrajpathak.flutter_cell_info.models.common.Network: java.lang.String mcc
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Weekly
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUTO_CANCEL
com.sumanrajpathak.flutter_cell_info.models.common.Network: java.lang.String mnc
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int cqi
id.flutter.flutter_background_service.R$dimen: int compat_button_inset_horizontal_material
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String contentTitle
com.google.android.gms.common.internal.MethodInvocation: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.JobSupport: java.lang.Object _state
kotlinx.coroutines.channels.BufferedChannel: long completedExpandBuffersAndPauseFlag
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DRAWABLE
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object closeHandler
com.sumanrajpathak.flutter_cell_info.models.CellData: int rscp
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String CHANNEL_ACTION
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String name
androidx.window.layout.SidecarAdapter: java.lang.String TAG
id.flutter.flutter_background_service.R$attr: int secondaryActivityAction
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int rssi
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer rnc
id.flutter.flutter_background_service.R$id: int androidx_window_activity_scope
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int ssRsrpAsu
com.google.android.gms.maps.GoogleMapOptions: android.os.Parcelable$Creator CREATOR
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State state
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer id
kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array
id.flutter.flutter_background_service.R$attr: int alwaysExpand
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer bcc
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_TITLE
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String SERIAL
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MILLISECONDS_SINCE_EPOCH
com.sumanrajpathak.flutter_cell_info.models.common.Band: int number
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PROGRESS
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object largeIcon
com.sumanrajpathak.flutter_cell_info.models.CellData: double snr
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_android_lStar
id.flutter.flutter_background_service.R$attr: int fontProviderFetchTimeout
androidx.window.core.Version: androidx.window.core.Version CURRENT
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: com.sumanrajpathak.flutter_cell_info.models.common.Band band
id.flutter.flutter_background_service.WatchdogReceiver: java.lang.String ACTION_RESPAWN
androidx.window.embedding.ActivityRule: boolean alwaysExpand
com.dexterous.flutterlocalnotifications.models.NotificationAction: com.dexterous.flutterlocalnotifications.models.IconSource iconSource
com.sumanrajpathak.flutter_cell_info.models.common.Network: java.lang.String iso
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer enb
com.google.android.gms.location.LocationSettingsStates: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.google.android.gms.signin.internal.zak: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$id: int title
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: com.dexterous.flutterlocalnotifications.models.PersonDetails person
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HIDE_EXPANDED_LARGE_ICON
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_3
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer maxProgress
id.flutter.flutter_background_service.R$attr: int fontVariationSettings
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Media
id.flutter.flutter_background_service.R$id: int tag_screen_reader_focusable
id.flutter.flutter_background_service.R$id: int tag_accessibility_pane_title
id.flutter.flutter_background_service.R$styleable: int[] ActivityFilter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TAG
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer subscriptionId
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer rnc
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA cdma
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_BIG_TEXT
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode inexact
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
androidx.window.R$attr: int finishSecondaryWithPrimary
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker$Companion $$INSTANCE
androidx.window.R$styleable: int ActivityFilter_activityName
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetricsCalculatorCompat INSTANCE
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_tileMode
com.sumanrajpathak.flutter_cell_info.models.CellData: int rsrpAsu
id.flutter.flutter_background_service.R$drawable: int ic_call_answer
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ARE_NOTIFICATIONS_ENABLED_METHOD
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderFetchStrategy
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarDeviceState lastDeviceState
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: io.flutter.plugin.common.EventChannel$EventSink val$sink
androidx.window.layout.SidecarAdapter: androidx.window.layout.SidecarAdapter$Companion Companion
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ACTION
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_LAUNCHED_APP
androidx.window.embedding.SplitPairRule: boolean finishSecondaryWithPrimary
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer tac
androidx.window.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA signalTDSCDMA
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer pci
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String description
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int MAX_IMAGES
androidx.window.layout.SidecarWindowBackend: java.lang.String TAG
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat windowExtension
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: double cdmaEcio
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double longitude
com.google.android.gms.location.LocationAvailability: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_ICON_ERROR_CODE
androidx.window.R$attr: int splitMinSmallestWidth
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int ecio
id.flutter.flutter_background_service.R$attr: int fontProviderQuery
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int csiSinr
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer audioAttributesUsage
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image image
androidx.window.embedding.SplitController: boolean sDebug
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object bigPicture
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_fontStyle
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode exactAllowWhileIdle
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND
id.flutter.flutter_background_service.R$dimen: int notification_big_circle_margin
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String INDETERMINATE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableVibration
com.sumanrajpathak.flutter_cell_info.models.CellData: int rscpAsu
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: java.lang.Long nci
id.flutter.flutter_background_service.Pipe: java.util.List listeners
androidx.window.R$attr: int clearTop
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Config config
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE lte
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Time
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: int rssi
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock globalLock
com.sumanrajpathak.flutter_cell_info.models.CellData: int csiSinr
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String TAG
androidx.window.R$attr: int secondaryActivityName
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_19
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND_SOURCE
com.sumanrajpathak.flutter_cell_info.models.common.Cell: java.lang.String type
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer cid
id.flutter.flutter_background_service.R$styleable: int[] GradientColor
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderCerts
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_font
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitMinWidth
kotlinx.coroutines.UndispatchedCoroutine: boolean threadLocalIsSet
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
id.flutter.flutter_background_service.BackgroundService: boolean isManuallyStopped
androidx.window.R$styleable: int SplitPairRule_splitMinWidth
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: android.app.Activity $activity
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
com.sumanrajpathak.flutter_cell_info.models.CellData: int bandDownlinkFrequency
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String title
com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM: int arfcn
id.flutter.flutter_background_service.R$string: int call_notification_incoming_text
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: double evdoEcio
androidx.window.R$styleable: int[] SplitPairRule
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Title
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: java.util.concurrent.ExecutorService cachedThreadPool
com.google.android.gms.auth.api.credentials.Credential: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
androidx.window.layout.DisplayCompatHelperApi17: androidx.window.layout.DisplayCompatHelperApi17 INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String KEY
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
id.flutter.flutter_background_service.R$attr: int splitRatio
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: androidx.window.layout.WindowLayoutInfo lastKnownValue
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock globalLock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long timeoutAfter
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArraySet splitRules
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_TAG
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource FilePath
id.flutter.flutter_background_service.R$attr: int fontProviderFetchStrategy
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: io.flutter.plugin.common.EventChannel eventChannel
androidx.window.R$attr: int alwaysExpand
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String subText
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: android.app.Activity activity
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Pipe$PipeListener listener
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelDescription
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String summaryText
id.flutter.flutter_background_service.R$drawable: int ic_call_decline
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE signalLTE
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] $VALUES
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: int evdoRssi
id.flutter.flutter_background_service.R$layout: int notification_template_part_time
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.concurrent.locks.ReentrantLock extensionWindowBackendLock
id.flutter.flutter_background_service.R$styleable: int[] SplitPairFilter
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String bandName
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULED_NOTIFICATIONS
com.sumanrajpathak.flutter_cell_info.models.CellData: int csiRsrq
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String user_id
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _prev
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int EXACT_ALARM_PERMISSION_REQUEST_CODE
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_16
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveSegment
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_TIME
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer audioAttributesUsage
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DISPATCHER_HANDLE
androidx.window.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: java.util.Map eventSinks
androidx.window.R$attr: int splitLayoutDirection
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String MODEL
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_RED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.ScheduleMode scheduleMode
com.sumanrajpathak.flutter_cell_info.models.CellsTypeList: java.util.List primaryCellList
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
com.google.android.gms.maps.model.PolygonOptions: android.os.Parcelable$Creator CREATOR
com.google.android.gms.maps.model.MarkerOptions: android.os.Parcelable$Creator CREATOR
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$id: int forever
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULE_MODE
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface extensionCallback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_SUMMARY_TEXT
kotlin.jvm.internal.FunctionReference: int flags
id.flutter.flutter_background_service.R$layout: int notification_template_icon_group
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_METHOD
com.sumanrajpathak.flutter_cell_info.models.CellData: long timestamp
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_17
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.util.ArrayList lines
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showProgress
id.flutter.flutter_background_service.R$drawable: int notification_oversize_large_icon_bg
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean $assertionsDisabled
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer progress
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer ncc
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean contextual
com.google.android.gms.internal.location.zzeg: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String iso
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean autoCancel
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DAY
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface sidecar
com.google.android.gms.location.LocationSettingsRequest: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: android.content.Context context
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int rssiAsu
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_gradientRadius
id.flutter.flutter_background_service.BuildConfig: boolean DEBUG
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer psc
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_RED
androidx.window.R$styleable: int[] SplitPlaceholderRule
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer cpid
id.flutter.flutter_background_service.R$styleable: int[] ColorStateListItem
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle BigPicture
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_font
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String summaryText
id.flutter.flutter_background_service.R$id: int tag_unhandled_key_event_manager
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String HOST
id.flutter.flutter_background_service.R$styleable: int[] FontFamilyFont
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters
id.flutter.flutter_background_service.R$string: int call_notification_decline_action
com.sumanrajpathak.flutter_cell_info.models.CellData: int downlinkUarfcn
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONGOING
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_startColor
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitLayoutDirection
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader$OnImageAvailableListener onImageAvailableListener
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BOT
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderAuthority
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource ByteArray
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_GROUP_METHOD
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int timingAdvance
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ADDITIONAL_FLAGS
com.sumanrajpathak.flutter_cell_info.models.CellData: int rssiAsu
com.google.android.gms.common.internal.safeparcel.SafeParcelable: java.lang.String NULL
id.flutter.flutter_background_service.R$id: int tag_accessibility_clickable_spans
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
id.flutter.flutter_background_service.R$id: int time
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String PLAY_SOUND
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval EveryMinute
kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class baseType
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANT
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_22
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: double rsrp
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean cancelNotification
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String NAME
androidx.window.layout.SidecarWindowBackend: boolean DEBUG
id.flutter.flutter_background_service.BackgroundService: android.os.Handler mainHandler
com.google.android.gms.location.LastLocationRequest: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int rssiAsu
com.sumanrajpathak.flutter_cell_info.models.CellType: java.lang.String type
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int rsrpAsu
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataMimeType
androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE
id.flutter.flutter_background_service.R$dimen: int compat_notification_large_icon_max_width
id.flutter.flutter_background_service.R$drawable: int notification_bg_low_pressed
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer enb
id.flutter.flutter_background_service.R$drawable: int ic_call_answer_video
id.flutter.flutter_background_service.R$layout: int ime_secondary_split_test_activity
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer cid
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_RED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean silent
id.flutter.flutter_background_service.R$id: int action_container
id.flutter.flutter_background_service.R$id: int actions
com.google.android.gms.internal.location.zzl: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMESTAMP
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer color
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_23
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map activityToListeners
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction CreateIfNotExists
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: int mnc
androidx.window.embedding.EmbeddingCompat: boolean DEBUG
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_BLUE
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int rssi
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_13
id.flutter.flutter_background_service.R$id: int right_icon
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTrackerDecorator decorator
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableLights
com.sumanrajpathak.flutter_cell_info.models.CellData: int timingAdvance
androidx.window.R$attr: int secondaryActivityAction
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label
com.sumanrajpathak.flutter_cell_info.models.CellData: int ssRsrpAsu
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean showsUserInterface
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer bandwidth
androidx.window.embedding.MatcherUtils: boolean sDebugMatchers
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_25
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_endColor
com.sumanrajpathak.flutter_cell_info.models.CellData: int ssRsrq
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: double snr
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String URI
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONLY_ALERT_ONCE
id.flutter.flutter_background_service.R$drawable: int ic_call_answer_video_low
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer bsic
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_startY
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean hideExpandedLargeIcon
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VISIBILITY
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PERSON
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson gson
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String sound
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.PermissionRequestListener callback
kotlinx.coroutines.channels.BufferedChannel: long bufferEnd
id.flutter.flutter_background_service.R$styleable: int GradientColorItem_android_color
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: androidx.window.layout.SidecarWindowBackend this$0
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
id.flutter.flutter_background_service.R$drawable: int notification_action_background
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_LINES
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: java.util.List neighboringCellList
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatBigText
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType NONE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT
id.flutter.flutter_background_service.R$styleable: int SplitPairFilter_primaryActivityName
id.flutter.flutter_background_service.R$styleable: int Capability_shortcutMatchRequired
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String OSVERSION
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int csiRsrq
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.DateTimeComponents matchDateTimeComponents
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: java.lang.Integer pci
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents Time
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_4
id.flutter.flutter_background_service.BackgroundService: android.os.PowerManager$WakeLock lockStatic
kotlinx.coroutines.CancellableContinuationImpl: int _decisionAndIndex
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
androidx.window.core.Version$bigInteger$2: androidx.window.core.Version this$0
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend globalInstance
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarInterface$SidecarCallback callbackInterface
io.flutter.embedding.engine.FlutterJNI: java.lang.String vmServiceUri
id.flutter.flutter_background_service.Config: android.content.SharedPreferences pref
id.flutter.flutter_background_service.R$styleable: int[] SplitPairRule
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_endY
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String ID
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer bandwidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_NOTIFICATION_REPEAT_FREQUENCY
androidx.window.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Daily
id.flutter.flutter_background_service.R$attr: int finishPrimaryWithSecondary
androidx.window.embedding.SplitInfo: float splitRatio
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int rscp
com.google.android.gms.internal.location.zzei: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean allowGeneratedReplies
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $VALUES
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LARGE_ICON_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource DrawableResource
id.flutter.flutter_background_service.R$id: int blocking
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer cid
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean indeterminate
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_endX
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String uri
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.String conversationTitle
kotlinx.coroutines.channels.BufferedChannel: long sendersAndCloseStatus
androidx.window.embedding.SplitRule: float splitRatio
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer bcc
com.sumanrajpathak.flutter_cell_info.models.CellData: int ecno
kotlin.jvm.internal.CallableReference: java.lang.String name
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: java.lang.String carrierName
id.flutter.flutter_background_service.R$id: int right_side
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
androidx.window.layout.DisplayCompatHelperApi28: androidx.window.layout.DisplayCompatHelperApi28 INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_DATE_TIME
androidx.window.layout.WindowMetrics: androidx.window.core.Bounds _bounds
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String typeFieldName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLORIZED
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer psc
id.flutter.flutter_background_service.R$dimen: int notification_media_narrow_margin
com.sumanrajpathak.flutter_cell_info.models.common.Cell: java.lang.String connectionStatus
io.flutter.embedding.engine.FlutterJNI: float displayWidth
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.String ecgi
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean showBadge
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA wcdma
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
com.sumanrajpathak.flutter_cell_info.models.CellData: double evdoEcio
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_fontWeight
com.google.android.gms.internal.location.zzee: android.os.Parcelable$Creator CREATOR
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: java.lang.Thread thread
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_8
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String description
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer visibility
com.google.android.gms.common.internal.TelemetryData: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
id.flutter.flutter_background_service.R$dimen: int notification_content_margin_start
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ticker
androidx.window.R$attr: int finishPrimaryWithSecondary
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BODY
id.flutter.flutter_background_service.R$id: int locale
id.flutter.flutter_background_service.R$attr: int activityName
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_centerX
android.support.v4.media.session.MediaSessionCompat$Token: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long millisecondsSinceEpoch
kotlin.jvm.internal.CallableReference: java.lang.Class owner
id.flutter.flutter_background_service.R$drawable: int notification_bg_normal
id.flutter.flutter_background_service.R$dimen: int notification_right_icon_size
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_1
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_CONVERSATION
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long calledAt
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage lastConsumedImage
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer bid
id.flutter.flutter_background_service.R$attr: int fontStyle
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
id.flutter.flutter_background_service.R$styleable: int SplitPairFilter_secondaryActivityAction
androidx.window.R$attr: int splitMinWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHRONOMETER_COUNT_DOWN
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableLights
kotlinx.coroutines.EventLoopImplBase$DelayedTask: java.lang.Object _heap
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle BigText
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2
id.flutter.flutter_background_service.R$id: int text2
com.sumanrajpathak.flutter_cell_info.models.CellData: int ssSinr
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean important
id.flutter.flutter_background_service.R$string: int call_notification_ongoing_text
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_ALPHA
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_KEY
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TEXT
id.flutter.flutter_background_service.R$attr: int splitLayoutDirection
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String mcc
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERMISSION_REQUEST_IN_PROGRESS_ERROR_CODE
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type$Companion Companion
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatContentTitle
android.support.v4.media.session.ParcelableVolumeInfo: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Integer sid
id.flutter.flutter_background_service.R$styleable: int[] FontFamily
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
id.flutter.flutter_background_service.R$color: int notification_action_color_filter
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderQuery
com.google.android.gms.location.zzal: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int ecno
id.flutter.flutter_background_service.R$id: int info
com.google.android.gms.location.LocationSettingsResult: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List lastInfo
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer ledColor
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
id.flutter.flutter_background_service.R$color: int androidx_core_secondary_text_default_material_light
androidx.window.embedding.EmbeddingCompat: java.lang.String TAG
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.WeakHashMap activityWindowLayoutInfo
id.flutter.flutter_background_service.R$id: int notification_main_column_container
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_INTERVAL
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ID
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int csiRsrpAsu
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: int[] additionalFlags
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String mnc
com.google.android.gms.auth.api.credentials.HintRequest: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Info
androidx.window.layout.SidecarCompat$FirstAttachAdapter: androidx.window.layout.SidecarCompat sidecarCompat
id.flutter.flutter_background_service.R$id: int dialog_button
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMEOUT_AFTER
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_CALLBACK_HANDLE_METHOD
id.flutter.flutter_background_service.R$attr: int fontProviderPackage
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
id.flutter.flutter_background_service.R$drawable: int notification_template_icon_low_bg
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE_BITMAP_SOURCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showWhen
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NUMBER
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
androidx.window.core.Version: kotlin.Lazy bigInteger$delegate
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_28
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean ignoringFence
com.sumanrajpathak.flutter_cell_info.models.CellData: int ecio
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityAction
android.support.v4.media.MediaBrowserCompat$MediaItem: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: java.util.concurrent.Executor executor
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_PROGRESS
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM signalGSM
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA tdscdma
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object value
androidx.window.R$id: int androidx_window_activity_scope
androidx.window.embedding.SplitRule: int minSmallestWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean usesChronometer
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_fontWeight
id.flutter.flutter_background_service.R$dimen: int compat_button_inset_vertical_material
android.support.v4.media.RatingCompat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String text
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_ON_MS
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode alarmClock
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderSystemFontFamily
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String title
id.flutter.flutter_background_service.R$attr: int activityAction
androidx.window.R$styleable: int ActivityFilter_activityAction
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUDIO_ATTRIBUTES_USAGE
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String USER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON
id.flutter.flutter_background_service.R$id: int notification_main_column
androidx.window.core.Version: java.lang.String VERSION_PATTERN_STRING
kotlin.coroutines.jvm.internal.SuspendLambda: int arity
io.flutter.embedding.engine.FlutterOverlaySurface: int id
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_GREEN
id.flutter.flutter_background_service.R$attr: int shortcutMatchRequired
com.sumanrajpathak.flutter_cell_info.models.CellData: double rsrp
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_NOTIFICATION
com.google.android.gms.maps.model.CircleOptions: android.os.Parcelable$Creator CREATOR
com.google.android.gms.signin.internal.zag: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String CPU_ABI
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined
id.flutter.flutter_background_service.R$drawable: int ic_call_answer_low
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_SOUND_ERROR_CODE
androidx.window.R$attr: int placeholderActivityName
id.flutter.flutter_background_service.R$id: int tag_accessibility_actions
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
android.support.v4.media.MediaDescriptionCompat: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer bsic
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String GROUP_ID
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_alpha
androidx.window.R$styleable: int[] ActivityRule
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String DESCRIPTION
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: double rsrq
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE_INFORMATION
androidx.window.R$attr: int activityAction
androidx.window.embedding.SplitRule: int minWidth
androidx.window.layout.SidecarCompat: java.util.Map componentCallbackMap
android.support.v4.os.ResultReceiver: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer callback
androidx.window.R$attr: int activityName
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_LIGHTS
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ACTION_ID
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_ID
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency scheduledNotificationRepeatFrequency
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
com.sumanrajpathak.flutter_cell_info.models.CellData: int arfcn
kotlinx.coroutines.DefaultExecutor: int debugStatus
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
id.flutter.flutter_background_service.R$layout: int notification_template_custom_big
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
id.flutter.flutter_background_service.BackgroundService: io.flutter.embedding.engine.FlutterEngine backgroundEngine
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Activity mainActivity
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String summaryText
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_OFF_MS
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_fontStyle
com.sumanrajpathak.flutter_cell_info.models.CellData: int ssRsrp
id.flutter.flutter_background_service.BackgroundService: java.lang.String notificationContent
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_DESCRIPTION
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHORTCUT_ID
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PENDING_NOTIFICATION_REQUESTS_METHOD
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATION_MESSAGING_STYLE_METHOD
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
androidx.window.core.Version: java.lang.String description
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int ssRsrq
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String UNSUPPORTED_OS_VERSION_ERROR_CODE
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_20
com.sumanrajpathak.flutter_cell_info.models.CellData: int csiRsrp
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.util.ArrayList messages
com.sumanrajpathak.flutter_cell_info.models.common.Cell: com.sumanrajpathak.flutter_cell_info.models.common.Network network
id.flutter.flutter_background_service.R$id: int ltr
com.google.android.gms.auth.api.signin.GoogleSignInOptions: android.os.Parcelable$Creator CREATOR
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: org.json.JSONObject val$arg
id.flutter.flutter_background_service.R$id: int action_image
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity activity
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id
androidx.window.layout.SidecarCompat$TranslatingCallback: androidx.window.layout.SidecarCompat this$0
com.google.android.gms.maps.model.StampStyle: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_18
id.flutter.flutter_background_service.R$id: int tag_transition_group
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer cgi
androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion
androidx.window.embedding.ActivityFilter: java.lang.String intentAction
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int bitErrorRate
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String ID
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String contentTitle
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: long[] vibrationPattern
id.flutter.flutter_background_service.R$layout: int notification_template_part_chronometer
id.flutter.flutter_background_service.R$attr: int queryPatterns
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_ttcIndex
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: java.lang.Integer tac
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map subtypeToLabel
io.flutter.embedding.engine.FlutterJNI: float displayHeight
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SET_AS_GROUP_SUMMARY
id.flutter.flutter_background_service.R$string: int call_notification_hang_up_action
id.flutter.flutter_background_service.R$styleable: int ActivityRule_alwaysExpand
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Integer bid
com.google.android.gms.maps.model.CameraPosition: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_GREEN
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatSummaryText
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource FlutterBitmapAsset
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_METHOD
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Companion Companion
androidx.window.R$id: int locale
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String id
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitMinSmallestWidth
androidx.window.layout.SidecarCompat: java.lang.String TAG
id.flutter.flutter_background_service.R$dimen: int notification_action_icon_size
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map labelToSubtype
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer ci
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int csiRsrp
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingAdapter adapter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CATEGORY
id.flutter.flutter_background_service.R$dimen: int notification_small_icon_size_as_large
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String AUDIO_ATTRIBUTES_USAGE
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_11
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.Long timestamp
id.flutter.flutter_background_service.R$styleable: int[] Capability
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String id
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String ecgi
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_26
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList splitChangeCallbacks
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: java.lang.String displayName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_ALPHA
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: int bitErrorRate
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
androidx.window.layout.HardwareFoldingFeature: androidx.window.core.Bounds featureBounds
kotlinx.coroutines.DispatchedCoroutine: int _decision
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String category
androidx.work.impl.utils.futures.AbstractFuture: androidx.work.impl.utils.futures.AbstractFuture$Waiter waiters
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _parentHandle
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer ci
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean colorized
id.flutter.flutter_background_service.R$styleable: int[] ActivityRule
id.flutter.flutter_background_service.R$dimen: int notification_subtext_size
androidx.window.layout.ExtensionWindowLayoutInfoBackend: androidx.window.extensions.layout.WindowLayoutComponent component
androidx.window.core.Version: androidx.window.core.Version UNKNOWN
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_RESPONSE_TYPE
com.sumanrajpathak.flutter_cell_info.models.common.Cell: java.lang.Integer subscriptionId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: long[] vibrationPattern
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource bigPictureBitmapSource
id.flutter.flutter_background_service.R$style: int Widget_Compat_NotificationActionText
id.flutter.flutter_background_service.R$id: int action_divider
androidx.window.layout.WindowMetricsCalculator$Companion: kotlin.jvm.functions.Function1 decorator
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean channelShowBadge
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object _closeCause
com.google.android.gms.maps.model.LatLng: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String START_FOREGROUND_SERVICE
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.nr.CellNR nr
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.Set registeredListeners
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation HORIZONTAL
androidx.window.embedding.SplitPairRule: boolean finishPrimaryWithSecondary
androidx.window.layout.WindowInfoTrackerImpl: int BUFFER_CAPACITY
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_NOTIFICATION
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_14
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ID
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String contentTitle
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.Time repeatTime
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHARED_PREFERENCES_KEY
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer cgi
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: java.lang.String subscriptionInfoNumber
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String IMPORTANCE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String VIBRATION_PATTERN
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CALLED_AT
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: androidx.window.layout.SidecarCompat this$0
id.flutter.flutter_background_service.R$dimen: int notification_small_icon_background_padding
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer nid
id.flutter.flutter_background_service.R$attr: int fontProviderCerts
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean fullScreenIntent
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ID
androidx.window.layout.WindowInfoTracker$Companion: boolean DEBUG
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.concurrent.Executor executor
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Pipe mainPipe
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int rssiAsu
id.flutter.flutter_background_service.R$styleable: int ActivityFilter_activityAction
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE bandLTE
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingAdapter adapter
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval Daily
androidx.window.R$id: int ltr
id.flutter.flutter_background_service.R$drawable: int notification_bg_normal_pressed
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String BRAND
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer iconResourceId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_TEXT
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ID
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedHeight
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ACTIONS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PRIORITY
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONVERSATION_TITLE
com.sumanrajpathak.flutter_cell_info.models.CellData: int bandNumber
com.sumanrajpathak.flutter_cell_info.models.CellData: int evdoSnr
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: int cdmaRssi
id.flutter.flutter_background_service.R$attr: int fontWeight
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Object largeIcon
com.dexterous.flutterlocalnotifications.models.MessageDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails person
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: java.util.List primaryCellList
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean ignoringFence
id.flutter.flutter_background_service.R$id: int tag_state_description
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitMinWidth
id.flutter.flutter_background_service.R$attr: int alpha
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetricsCalculator$Companion Companion
com.google.android.gms.auth.api.signin.internal.GoogleSignInOptionsExtensionParcelable: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer cpid
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.String TAG
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_6
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer rnc
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String scheduledDateTime
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationStyle style
androidx.window.R$styleable: int[] SplitPairFilter
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR signalNR
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Double lat
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON
id.flutter.flutter_background_service.R$id: int normal
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer eci
androidx.work.impl.utils.futures.AbstractFuture: java.lang.Object value
com.sumanrajpathak.flutter_cell_info.models.CellData: int downlinkEarfcn
com.sumanrajpathak.flutter_cell_info.models.CellData: int csiRsrpAsu
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String MINUTE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INITIALIZE_METHOD
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int ssRsrp
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_BLUE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_29
androidx.window.R$styleable: int SplitPairRule_clearTop
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String STOP_FOREGROUND_SERVICE
android.support.v4.media.session.MediaSessionCompat$QueueItem: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String groupKey
androidx.window.embedding.SplitPairFilter: android.content.ComponentName secondaryActivityName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANCE
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
id.flutter.flutter_background_service.R$attr: int lStar
com.google.android.gms.common.internal.RootTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SHOW_BADGE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIME_ZONE_NAME
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TICKER
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer lac
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_placeholderActivityName
androidx.window.R$styleable: int SplitPairRule_splitLayoutDirection
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_SHOW_BADGE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_clearTop
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.layout.SidecarAdapter sidecarAdapter
id.flutter.flutter_background_service.BackgroundService: java.lang.String TAG
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_centerY
com.sumanrajpathak.flutter_cell_info.models.CellData: int evdoRssi
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_fontVariationSettings
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_21
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer callback
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_FOREGROUND_NOTIFICATION_ACTION
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map listenerToActivity
id.flutter.flutter_background_service.R$drawable: int notify_panel_notification_icon_bg
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type type
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INPUT
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer importance
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State HALF_OPENED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer priority
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int bitErrorRate
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object bufferEndSegment
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_type
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack secondaryActivityStack
androidx.window.layout.FoldingFeature$Orientation: java.lang.String description
androidx.window.R$styleable: int ActivityRule_alwaysExpand
com.google.android.gms.common.internal.zav: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_ERROR_MESSAGE
id.flutter.flutter_background_service.R$string: int call_notification_answer_video_action
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CAN_SCHEDULE_EXACT_NOTIFICATIONS_METHOD
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Context applicationContext
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_GREEN
kotlin.jvm.internal.FunctionReference: int arity
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Line2
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval[] $VALUES
androidx.window.layout.FoldingFeature$State: java.lang.String description
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: id.flutter.flutter_background_service.FlutterBackgroundServicePlugin this$0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableVibration
id.flutter.flutter_background_service.R$attr: int fontProviderAuthority
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader activeReader
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DateAndTime
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_METHOD
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double lon
id.flutter.flutter_background_service.R$id: int view_tree_lifecycle_owner
id.flutter.flutter_background_service.R$id: int async
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean setAsGroupSummary
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int rssi
id.flutter.flutter_background_service.R$drawable: int ic_bg_service_small
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_METHOD
androidx.window.R$styleable: int SplitPairRule_splitMinSmallestWidth
id.flutter.flutter_background_service.R$drawable: int notification_bg_low
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String groupId
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String icon
androidx.window.layout.SidecarCompat$DistinctElementCallback: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface callbackInterface
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String DEVICE
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer eci
androidx.window.layout.WindowMetricsCalculatorCompat: java.lang.String TAG
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String type
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR: int downlinkArfcn
id.flutter.flutter_background_service.R$drawable: int notification_tile_bg
com.sumanrajpathak.flutter_cell_info.models.CellData: int cdmaRssi
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledColor
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ZONED_SCHEDULE_METHOD
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.List lastValue
com.sumanrajpathak.flutter_cell_info.models.CellData: int dbm
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode inexactAllowWhileIdle
id.flutter.flutter_background_service.R$drawable: int notification_bg
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingCompat$Companion Companion
id.flutter.flutter_background_service.R$attr: int nestedScrollViewStyle
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_fontVariationSettings
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer lac
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
com.google.android.gms.common.internal.ClientIdentity: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$color: int notification_icon_bg_color
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.String cgi
id.flutter.flutter_background_service.R$id: int tag_on_apply_window_listener
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendSegment
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType$Companion Companion
id.flutter.flutter_background_service.R$color: int call_notification_decline_color
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String CONTEXTUAL
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: int evdoSnr
com.google.android.gms.location.LocationResult: android.os.Parcelable$Creator CREATOR
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$attr: int ttcIndex
id.flutter.flutter_background_service.R$styleable: int SplitPairFilter_secondaryActivityName
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String UNKNOWN
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String NAME
androidx.window.R$styleable: int SplitPlaceholderRule_placeholderActivityName
id.flutter.flutter_background_service.R$layout: int custom_dialog
com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA: int downlinkUarfcn
id.flutter.flutter_background_service.R$string: int call_notification_screening_text
id.flutter.flutter_background_service.R$color: int androidx_core_ripple_material_light
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND
id.flutter.flutter_background_service.R$id: int chronometer
com.sumanrajpathak.flutter_cell_info.models.CellData: void setNcc(java.lang.Integer)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setLac(java.lang.Integer)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: WindowInfoTrackerCallbackAdapter(androidx.window.layout.WindowInfoTracker)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
id.flutter.flutter_background_service.BackgroundService: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getCgi()
kotlinx.coroutines.JobNode: JobNode()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setSettingsText(android.app.Notification$Builder,java.lang.CharSequence)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
io.flutter.view.AccessibilityBridge$LocaleStringAttribute: AccessibilityBridge$LocaleStringAttribute()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onActivityResult(int,int,android.content.Intent)
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int getRsrpAsu()
com.google.android.gms.internal.maps.zzc: zzc()
id.flutter.flutter_background_service.BackgroundService: android.os.PowerManager$WakeLock getLock(android.content.Context)
androidx.window.layout.FoldingFeature: boolean isSeparating()
com.sumanrajpathak.flutter_cell_info.models.common.Cell: void setNetwork(com.sumanrajpathak.flutter_cell_info.models.common.Network)
androidx.work.impl.WorkManagerImpl$Api24Impl: boolean isDeviceProtectedStorage(android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setEcgi(java.lang.String)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: ExtensionWindowLayoutInfoBackend$MulticastConsumer(android.app.Activity)
androidx.core.view.ViewCompat$Api19Impl: void setContentChangeTypes(android.view.accessibility.AccessibilityEvent,int)
id.flutter.flutter_background_service.BackgroundService: void receiveData(org.json.JSONObject)
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion()
androidx.core.view.WindowInsetsCompat$BuilderImpl30: WindowInsetsCompat$BuilderImpl30()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setMcc(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.SIMInfoResponse: SIMInfoResponse(java.util.List)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()
com.google.android.gms.common.api.internal.zzb: zzb()
com.sumanrajpathak.flutter_cell_info.models.common.Signal: void setDbm(int)
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setRssi(int)
androidx.window.layout.SidecarCompat: SidecarCompat(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)
androidx.window.embedding.SplitInfo: boolean contains(android.app.Activity)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
id.flutter.flutter_background_service.Config: java.lang.String getInitialNotificationTitle()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSsRsrp(int)
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
androidx.window.embedding.EmbeddingRule: EmbeddingRule()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCid(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getEnb()
com.sumanrajpathak.flutter_cell_info.models.common.Cell: void setSubscriptionId(java.lang.Integer)
androidx.core.view.DisplayCutoutCompat$Api28Impl: java.util.List getBoundingRects(android.view.DisplayCutout)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void waitOnFence(android.media.Image)
androidx.window.layout.SidecarCompat: boolean validateExtensionInterface()
androidx.window.embedding.SplitPlaceholderRule: boolean equals(java.lang.Object)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.core.view.WindowInsetsCompat$Impl21: boolean isConsumed()
androidx.core.view.ViewCompat$Api16Impl: void postInvalidateOnAnimation(android.view.View)
kotlinx.coroutines.EventLoop: EventLoop()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getBandDownlinkFrequency()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateRepeatIntervalMilliseconds(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
kotlin.collections.LongIterator: LongIterator()
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)
com.google.firebase.StartupTime: StartupTime()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType valueOf(java.lang.String)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
androidx.core.view.ViewCompat$Api28Impl: boolean isScreenReaderFocusable(android.view.View)
androidx.window.layout.WindowLayoutInfo: boolean equals(java.lang.Object)
androidx.core.app.AppOpsManagerCompat$Api29Impl: android.app.AppOpsManager getSystemService(android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: void setCellDataList(java.util.List)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] values()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $values()
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: int getRssi()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setSortKey(android.app.Notification$Builder,java.lang.String)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void start()
androidx.core.app.NotificationCompat$BubbleMetadata$Api30Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] values()
androidx.work.impl.utils.NetworkApi21: boolean hasCapabilityCompat(android.net.NetworkCapabilities,int)
androidx.core.app.NotificationCompat$Style$Api16Impl: void setTextViewTextSize(android.widget.RemoteViews,int,int,float)
androidx.window.layout.WindowInfoTracker$-CC: void reset()
androidx.activity.ComponentActivity: ComponentActivity()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setHOST(java.lang.String)
androidx.window.layout.WindowMetricsCalculatorCompat: WindowMetricsCalculatorCompat()
androidx.core.view.ViewCompat$Api21Impl: void setTranslationZ(android.view.View,float)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)
com.google.android.gms.internal.auth-api.zbc: zbc()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getDEVICE()
androidx.window.embedding.EmbeddingInterfaceCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()
androidx.window.embedding.EmbeddingCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
androidx.window.embedding.EmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setEci(java.lang.Integer)
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval[] $values()
kotlinx.coroutines.scheduling.SchedulerTimeSource: SchedulerTimeSource()
androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readInboxStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: void setRscpAsu(int)
kotlin.jvm.internal.FunctionReference: boolean isExternal()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
kotlin.collections.IntIterator: IntIterator()
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType[] values()
kotlin.jvm.internal.TypeIntrinsics: TypeIntrinsics()
androidx.core.location.LocationCompat$Api17Impl: long getElapsedRealtimeNanos(android.location.Location)
com.sumanrajpathak.flutter_cell_info.models.common.Cell: com.sumanrajpathak.flutter_cell_info.models.common.Network getNetwork()
com.sumanrajpathak.flutter_cell_info.models.common.Network: void setMnc(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemGestureInsets()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setTimingAdvance(int)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: void setSignalCDMA(com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA)
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer getBandwidth()
androidx.work.impl.utils.futures.DirectExecutor: androidx.work.impl.utils.futures.DirectExecutor[] values()
androidx.core.view.WindowInsetsCompat$Impl20: void setRootViewData(androidx.core.graphics.Insets)
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle setConversationTitle(android.app.Notification$MessagingStyle,java.lang.CharSequence)
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getAdjustedDefault()
androidx.room.IMultiInstanceInvalidationService$Stub: IMultiInstanceInvalidationService$Stub()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: double getSnr()
kotlin.collections.AbstractList: AbstractList()
androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)
com.sumanrajpathak.flutter_cell_info.models.common.Band: Band()
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: SIMInfo()
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: void setMnc(int)
androidx.window.layout.SidecarCompat: SidecarCompat(android.content.Context)
fr.bmartel.speedtest.model.ComputationMethod: fr.bmartel.speedtest.model.ComputationMethod[] values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
id.flutter.flutter_background_service.R: R()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivity()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: ExtensionsWindowLayoutInfoAdapter()
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: java.util.List getComponents()
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
androidx.window.embedding.SplitRule: int getMinWidth()
androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: java.lang.String getCarrierName()
kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()
androidx.core.view.ViewCompat$Api16Impl: void setImportantForAccessibility(android.view.View,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRELEASE(java.lang.String)
androidx.window.core.Version: Version(int,int,int,java.lang.String)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setVerificationIcon(android.app.Notification$CallStyle,android.graphics.drawable.Icon)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1: FlutterBackgroundServicePlugin$1(id.flutter.flutter_background_service.FlutterBackgroundServicePlugin)
androidx.work.impl.utils.futures.DirectExecutor: androidx.work.impl.utils.futures.DirectExecutor valueOf(java.lang.String)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void receiveData(org.json.JSONObject)
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: void setCarrierName(java.lang.String)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: CellCDMA()
androidx.window.layout.WindowMetricsCalculator$-CC: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
androidx.core.content.ContextCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
kotlinx.coroutines.JobCancellingNode: JobCancellingNode()
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
com.sumanrajpathak.flutter_cell_info.models.CellType: void setWcdma(com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)
dev.fluttercommunity.workmanager.WorkManagerCall$CancelTask: WorkManagerCall$CancelTask()
androidx.work.impl.WorkDatabase: WorkDatabase()
androidx.collection.SparseArrayCompat: SparseArrayCompat()
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setShortcutId(android.app.Notification$Builder,java.lang.String)
androidx.work.impl.background.systemjob.SystemJobService: SystemJobService()
com.sumanrajpathak.flutter_cell_info.models.CellType: CellType()
androidx.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
androidx.core.view.WindowInsetsCompat$Impl20: boolean equals(java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setNci(java.lang.Long)
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()
com.dexterous.flutterlocalnotifications.utils.StringUtils: StringUtils()
androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()
androidx.window.core.Version: int hashCode()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: WindowInfoTrackerCallbackAdapter$addListener$1$1(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer getTac()
kotlinx.coroutines.internal.LockFreeLinkedListHead: LockFreeLinkedListHead()
com.google.gson.internal.Excluder: Excluder()
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int)
com.google.android.gms.common.api.Api$BaseClientBuilder: Api$BaseClientBuilder()
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: int getEvdoSnr()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void applyGrouping(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: SIMInfo(java.lang.String,java.lang.String,int,int,java.lang.String)
androidx.work.impl.utils.NetworkApi23: android.net.Network getActiveNetworkCompat(android.net.ConnectivityManager)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
androidx.window.embedding.SplitController$Companion: SplitController$Companion()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getHARDWARE()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer getPci()
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat()
androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)
androidx.window.layout.SidecarCompat$DistinctElementCallback: SidecarCompat$DistinctElementCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getCdmaRssi()
id.flutter.flutter_background_service.WatchdogReceiver: void enqueue(android.content.Context,int)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
com.google.android.gms.common.api.GoogleApiClient: GoogleApiClient()
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)
androidx.core.view.WindowInsetsCompat$Impl20: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
com.sumanrajpathak.flutter_cell_info.models.common.Band: int getChannelNumber()
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$Action$Builder setAuthenticationRequired(android.app.Notification$Action$Builder,boolean)
com.google.android.gms.common.api.Api$AnyClientKey: Api$AnyClientKey()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setCsiRsrp(int)
androidx.window.core.Version: int getMajor()
com.sumanrajpathak.flutter_cell_info.models.CellData: double getRsrq()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: double getRsrq()
androidx.window.core.Bounds: int getTop()
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setVerificationText(android.app.Notification$CallStyle,java.lang.CharSequence)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
androidx.window.layout.FoldingFeature$Orientation: FoldingFeature$Orientation(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.Image acquireLatestImage()
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: void setNeighboringCellList(java.util.List)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotificationMessagingStyle(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setSnr(double)
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: BigTextStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean)
androidx.window.layout.EmptyDecorator: EmptyDecorator()
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
androidx.core.view.ViewCompat$Api16Impl: void setHasTransientState(android.view.View,boolean)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer getNcc()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.util.List)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCqi(int)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle forIncomingCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)
com.sumanrajpathak.flutter_cell_info.models.CellData: long getTimestamp()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA: int getDownlinkUarfcn()
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme)
androidx.window.layout.WindowInfoTracker$-CC: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
kotlinx.coroutines.MainCoroutineDispatcher: MainCoroutineDispatcher()
kotlin.jvm.internal.CallableReference: java.lang.Object call(java.lang.Object[])
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: void setBitErrorRate(int)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
com.sumanrajpathak.flutter_cell_info.models.CellData: int getBandNumber()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCi(java.lang.Integer)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)
io.flutter.view.TextureRegistry$ImageConsumer: void release()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.graphics.Bitmap getBitmapFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int)
androidx.core.app.NotificationCompat$BigPictureStyle$Api16Impl: android.app.Notification$BigPictureStyle createBigPictureStyle(android.app.Notification$Builder)
vn.hunghd.flutterdownloader.DownloadStatus: vn.hunghd.flutterdownloader.DownloadStatus valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupAllowWhileIdleAlarm(com.dexterous.flutterlocalnotifications.models.NotificationDetails,android.app.AlarmManager,long,android.app.PendingIntent)
androidx.loader.content.ModernAsyncTask: ModernAsyncTask()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA getSignalWCDMA()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getCsiRsrp()
androidx.core.view.ViewCompat$Api19Impl: int getAccessibilityLiveRegion(android.view.View)
com.dexterous.flutterlocalnotifications.models.NotificationAction: NotificationAction(java.util.Map)
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM getGsm()
com.google.android.gms.maps.internal.zzcc: zzcc()
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: void setRssiAsu(int)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
kotlin.jvm.internal.CallableReference: boolean isAbstract()
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
id.flutter.flutter_background_service.WatchdogReceiver: void onReceive(android.content.Context,android.content.Intent)
androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomHeadsUpContentView(android.app.Notification$Builder,android.widget.RemoteViews)
androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.models.Time: com.dexterous.flutterlocalnotifications.models.Time from(java.util.Map)
io.flutter.embedding.engine.FlutterJNI: float getScaledFontSize(float,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getBandChannelNumber()
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getDbm()
androidx.window.embedding.SplitController: void unregisterRule(androidx.window.embedding.EmbeddingRule)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: double getEvdoEcio()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setColorized(android.app.Notification$Builder,boolean)
androidx.window.core.Bounds: Bounds(android.graphics.Rect)
androidx.core.app.AlarmManagerCompat$Api23Impl: void setExactAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent)
androidx.core.app.NotificationCompat$BigPictureStyle$Api16Impl: void setSummaryText(android.app.Notification$BigPictureStyle,java.lang.CharSequence)
androidx.room.Index$Order: androidx.room.Index$Order valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action build(android.app.Notification$Action$Builder)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle createMessagingStyle(java.lang.CharSequence)
androidx.core.app.Person$Api28Impl: androidx.core.app.Person fromAndroidPerson(android.app.Person)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Integer getBid()
androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
androidx.work.impl.foreground.SystemForegroundService$Api31Impl: void startForeground(android.app.Service,int,android.app.Notification,int)
androidx.core.content.ContextCompat$Api23Impl: java.lang.String getSystemServiceName(android.content.Context,java.lang.Class)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getPRODUCT()
androidx.lifecycle.ViewModel: ViewModel()
com.sumanrajpathak.flutter_cell_info.models.common.Network: java.lang.String getMnc()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getCpid()
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOp(android.app.AppOpsManager,java.lang.String,java.lang.String)
androidx.work.WorkManager: WorkManager()
kotlin.jvm.internal.CallableReference: java.util.List getAnnotations()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
androidx.core.app.NotificationCompat$Style: NotificationCompat$Style()
androidx.core.location.LocationManagerCompat$Api31Impl: boolean registerGnssMeasurementsCallback(android.location.LocationManager,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)
id.flutter.flutter_background_service.Config: Config(android.content.Context)
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannels(android.app.NotificationManager,java.util.List)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()
androidx.core.content.ContextCompat$Api26Impl: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCgi(java.lang.Integer)
androidx.window.core.Bounds: boolean isZero()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
androidx.core.view.ViewCompat$Api16Impl: boolean hasTransientState(android.view.View)
androidx.window.embedding.EmptyEmbeddingComponent: EmptyEmbeddingComponent()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void disableFenceForTest()
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int getBitErrorRate()
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: int getMcc()
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)
androidx.core.view.ViewCompat$Api28Impl: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
io.flutter.plugins.firebase.core.GeneratedAndroidFirebaseCore$PigeonFirebaseOptions: GeneratedAndroidFirebaseCore$PigeonFirebaseOptions()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMediaStyle(androidx.core.app.NotificationCompat$Builder)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNextNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: java.lang.String toString()
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets dispatchApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api24Impl: android.app.Notification$MessagingStyle$Message createMessage(java.lang.CharSequence,long,java.lang.CharSequence)
io.flutter.view.TextureRegistry$SurfaceProducer: void setSize(int,int)
io.flutter.view.TextureRegistry$SurfaceProducer: int getHeight()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationManagerCompat getNotificationManager(android.content.Context)
androidx.core.app.NotificationCompat$BigTextStyle$Api16Impl: android.app.Notification$BigTextStyle setSummaryText(android.app.Notification$BigTextStyle,java.lang.CharSequence)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
androidx.window.layout.WindowMetricsCalculatorCompat: int getNavigationBarHeight(android.content.Context)
androidx.core.view.ViewCompat$Api28Impl: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA getCdma()
androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: com.sumanrajpathak.flutter_cell_info.models.nr.BandNR getBandNR()
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)
androidx.window.core.Bounds: int hashCode()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: void setEcio(int)
androidx.window.embedding.ActivityStack: int hashCode()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCpid(java.lang.Integer)
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
androidx.core.view.ViewCompat$Api21Impl: boolean startNestedScroll(android.view.View,int)
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer getEnb()
androidx.work.ListenableWorker: ListenableWorker(android.content.Context,androidx.work.WorkerParameters)
com.google.android.gms.dynamite.zzn: zzn()
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getExternalCacheDirs(android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.PendingIntent getBroadcastPendingIntent(android.content.Context,int,android.content.Intent)
androidx.core.view.ViewCompat$Api16Impl: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)
com.google.gson.TypeAdapter: TypeAdapter()
androidx.core.app.NotificationCompat$MessagingStyle$Api28Impl: android.app.Notification$MessagingStyle setGroupConversation(android.app.Notification$MessagingStyle,boolean)
id.flutter.flutter_background_service.BootReceiver: void onReceive(android.content.Context,android.content.Intent)
androidx.arch.core.internal.SafeIterableMap: SafeIterableMap()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getCallbackHandle(io.flutter.plugin.common.MethodChannel$Result)
vn.hunghd.flutterdownloader.DownloadWorker: DownloadWorker(android.content.Context,androidx.work.WorkerParameters)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBcc(java.lang.Integer)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: boolean useAlarmClock()
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
com.baseflow.geolocator.GeolocatorLocationService: GeolocatorLocationService()
com.sumanrajpathak.flutter_cell_info.models.CellData: CellData()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSubscriptionId(java.lang.Integer)
androidx.window.embedding.EmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
com.example.qosambassadors.MainActivity: MainActivity()
androidx.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
id.flutter.flutter_background_service.Pipe: Pipe()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setTimingAdvance(int)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class,java.lang.String)
androidx.loader.content.ModernAsyncTask$Status: androidx.loader.content.ModernAsyncTask$Status[] values()
io.flutter.embedding.engine.FlutterJNI: void SetIsRenderingToImageView(boolean)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor[] values()
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
io.flutter.plugins.urllauncher.Messages$WebViewOptions: Messages$WebViewOptions()
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
com.google.android.gms.common.api.Api$ApiOptions$NoOptions: Api$ApiOptions$NoOptions()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double getLatitude()
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.WindowMetrics: java.lang.String toString()
androidx.window.embedding.EmbeddingTranslatingCallback: EmbeddingTranslatingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
androidx.window.embedding.EmbeddingInterfaceCompat: void setSplitRules(java.util.Set)
androidx.window.layout.SidecarWindowBackend: void getWindowLayoutChangeCallbacks$annotations()
com.dexterous.flutterlocalnotifications.utils.StringUtils: java.lang.Boolean isNullOrEmpty(java.lang.String)
android.support.v4.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
cz.mroczis.netmonster.core.feature.postprocess.PlmnPostprocessor$NetworkGeneration: cz.mroczis.netmonster.core.feature.postprocess.PlmnPostprocessor$NetworkGeneration valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getBsic()
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR: BandNR()
androidx.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setRnc(java.lang.Integer)
androidx.window.core.Bounds: int getWidth()
androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: long getCreatedAt()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setBandTDSCDMA(com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA)
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: SidecarWindowBackend$ExtensionListenerImpl(androidx.window.layout.SidecarWindowBackend)
com.google.android.gms.location.LocationCallback: LocationCallback()
androidx.window.embedding.SplitRule$Api30Impl: SplitRule$Api30Impl()
kotlin.jvm.internal.Lambda: java.lang.String toString()
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setSound(android.app.Notification$Builder,android.net.Uri,java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCdmaEcio(double)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode[] $values()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setCsiRsrpAsu(int)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: SidecarCompat$DistinctSidecarElementCallback(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)
androidx.core.text.ICUCompat$Api24Impl: android.icu.util.ULocale addLikelySubtags(java.lang.Object)
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()
androidx.work.ListenableWorker$Result: ListenableWorker$Result()
kotlin.jvm.internal.FunctionReference: boolean isSuspend()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
androidx.core.view.DisplayCutoutCompat$Api28Impl: android.view.DisplayCutout createDisplayCutout(android.graphics.Rect,java.util.List)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()
androidx.window.layout.ActivityCompatHelperApi24: boolean isInMultiWindowMode(android.app.Activity)
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.plugins.urllauncher.Messages$BrowserOptions: Messages$BrowserOptions()
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: java.util.List getComponents()
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()
androidx.window.java.R: R()
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle[] $values()
androidx.window.layout.SidecarWindowBackend: void setWindowExtension(androidx.window.layout.ExtensionInterfaceCompat)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
androidx.core.view.ViewCompat$Api28Impl: void setScreenReaderFocusable(android.view.View,boolean)
io.flutter.plugins.urllauncher.WebViewActivity: WebViewActivity()
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnTrimMemoryListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnTrimMemoryListener)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: byte[] castObjectToByteArray(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)
com.dexterous.flutterlocalnotifications.models.SoundSource: SoundSource(java.lang.String,int)
androidx.window.layout.SidecarWindowBackend: SidecarWindowBackend(androidx.window.layout.ExtensionInterfaceCompat)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void maybeWaitOnFence(android.media.Image)
androidx.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
kotlin.random.Random: Random()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()
com.google.maps.android.ui.RotationLayout: void setViewRotation(int)
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.util.List castList(java.lang.Class,java.util.Collection)
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
androidx.work.OverwritingInputMerger: OverwritingInputMerger()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCsiRsrpAsu(int)
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setSsRsrp(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSsSinr(int)
com.sumanrajpathak.flutter_cell_info.models.common.Network: java.lang.String getMcc()
androidx.window.layout.WindowMetrics: boolean equals(java.lang.Object)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int)
id.flutter.flutter_background_service.BackgroundService: void runService()
androidx.core.app.ActivityCompat$Api23Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
com.dexterous.flutterlocalnotifications.models.BitmapSource: BitmapSource(java.lang.String,int)
androidx.work.NetworkType: androidx.work.NetworkType valueOf(java.lang.String)
androidx.window.layout.SidecarAdapter: SidecarAdapter()
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult valueOf(java.lang.String)
com.google.android.gms.maps.MapsInitializer: MapsInitializer()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer getPsc()
kotlin.jvm.internal.Lambda: Lambda(int)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer getEci()
androidx.core.view.ViewCompat$UnhandledKeyEventManager: ViewCompat$UnhandledKeyEventManager()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
com.lyokone.location.NotificationOptions: NotificationOptions()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)
androidx.work.Constraints: Constraints()
org.apache.commons.net.ftp.FTPCmd: org.apache.commons.net.ftp.FTPCmd valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: void setNid(java.lang.Integer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidBigPictureResources(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCPU_ABI2(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl: void copyRootViewBounds(android.view.View)
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api16Impl: int getImportantForAccessibility(android.view.View)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()
androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: void setTimingAdvance(int)
androidx.window.core.Bounds: boolean equals(java.lang.Object)
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
androidx.core.view.WindowInsetsCompat$Impl: WindowInsetsCompat$Impl(androidx.core.view.WindowInsetsCompat)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress: com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress[] values()
androidx.core.app.NotificationManagerCompat$Api26Impl: java.util.List getNotificationChannels(android.app.NotificationManager)
com.google.android.gms.internal.location.zzc: zzc()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()
fr.bmartel.speedtest.model.SpeedTestMode: fr.bmartel.speedtest.model.SpeedTestMode[] values()
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: double getCdmaEcio()
androidx.window.embedding.SplitPairFilter: boolean equals(java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.SIMInfoResponse: SIMInfoResponse()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.Person buildPerson(android.content.Context,com.dexterous.flutterlocalnotifications.models.PersonDetails)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1: void onReceived(org.json.JSONObject)
com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE: int getDownlinkEarfcn()
androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)
androidx.core.app.NotificationCompat$DecoratedCustomViewStyle$Api24Impl: android.app.Notification$DecoratedCustomViewStyle createDecoratedCustomViewStyle()
androidx.core.view.ViewCompat$Api16Impl: void requestFitSystemWindows(android.view.View)
kotlin.jvm.internal.PropertyReference: PropertyReference()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationAppLaunchDetails(io.flutter.plugin.common.MethodChannel$Result)
id.flutter.flutter_background_service.Config: java.lang.String getNotificationChannelId()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)
kotlinx.coroutines.internal.LockFreeLinkedListNode: LockFreeLinkedListNode()
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Action$Builder setContextual(android.app.Notification$Action$Builder,boolean)
kotlinx.coroutines.android.HandlerDispatcher: HandlerDispatcher()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)
androidx.core.view.WindowInsetsCompat$Impl20: boolean isRound()
id.flutter.flutter_background_service.Pipe: boolean hasListener()
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode[] values()
androidx.window.embedding.SplitPairRule: boolean equals(java.lang.Object)
androidx.core.app.NotificationManagerCompat$Api26Impl: void deleteNotificationChannel(android.app.NotificationManager,java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM getSignalGSM()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSid(java.lang.Integer)
androidx.core.app.Person$Api28Impl: android.app.Person toAndroidPerson(androidx.core.app.Person)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: WindowInfoTrackerImpl$windowLayoutInfo$1(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVibrationPattern(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void maybeCloseReader(android.media.ImageReader)
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)
androidx.window.embedding.EmptyEmbeddingComponent: void setEmbeddingRules(java.util.Set)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigTextStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: boolean getValue(java.lang.Boolean)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setColor(android.app.Notification$Builder,int)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setVisibility(android.app.Notification$Builder,int)
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: java.util.List getCellDataList()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int getCqi()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.lang.Object)
androidx.window.embedding.SplitRuleParser: SplitRuleParser()
androidx.window.embedding.ExtensionEmbeddingBackend: ExtensionEmbeddingBackend(androidx.window.embedding.EmbeddingInterfaceCompat)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: WindowInsetsCompat$BuilderImpl20()
kotlin.UninitializedPropertyAccessException: UninitializedPropertyAccessException()
io.flutter.view.TextureRegistry$ImageConsumer: long id()
cz.mroczis.netmonster.core.feature.postprocess.PlmnPostprocessor$NetworkGeneration: cz.mroczis.netmonster.core.feature.postprocess.PlmnPostprocessor$NetworkGeneration[] values()
androidx.work.impl.workers.ConstraintTrackingWorker: ConstraintTrackingWorker(android.content.Context,androidx.work.WorkerParameters)
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnFrameConsumedListener(io.flutter.view.TextureRegistry$OnFrameConsumedListener)
androidx.core.view.ViewCompat$Api19Impl: boolean isAttachedToWindow(android.view.View)
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setCsiSinr(int)
com.dexterous.flutterlocalnotifications.models.PersonDetails: PersonDetails(java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
kotlin.jvm.internal.CallableReference: java.lang.String getSignature()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void stopForegroundService(io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] values()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
androidx.window.core.Version: int compareTo(androidx.window.core.Version)
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannelGroups(android.app.NotificationManager,java.util.List)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()
kotlin.jvm.internal.FunctionReference: int getArity()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void release()
androidx.core.app.NotificationCompat$InboxStyle$Api16Impl: android.app.Notification$InboxStyle setSummaryText(android.app.Notification$InboxStyle,java.lang.CharSequence)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getSERIAL()
androidx.window.embedding.SplitPlaceholderRule: int hashCode()
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation: StyleInformation()
com.dexterous.flutterlocalnotifications.models.NotificationStyle: NotificationStyle(java.lang.String,int)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.net.Uri getUri(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)
androidx.window.core.Bounds: java.lang.String toString()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setCid(java.lang.Integer)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: NotificationChannelGroupDetails()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: FlutterBackgroundServicePlugin$2(id.flutter.flutter_background_service.FlutterBackgroundServicePlugin,io.flutter.plugin.common.EventChannel$EventSink,org.json.JSONObject)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigTextStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)
cz.mroczis.netmonster.core.feature.config.PhysicalChannelConfigSource: PhysicalChannelConfigSource()
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setBandGSM(com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM)
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void setBigPicture(android.app.Notification$BigPictureStyle,android.graphics.drawable.Icon)
androidx.core.view.ViewGroupCompat$Api21Impl: void setTransitionGroup(android.view.ViewGroup,boolean)
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: java.lang.String getDisplayName()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getBandName()
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: void setMcc(int)
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $values()
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList createLocaleList(java.util.Locale[])
androidx.window.layout.DisplayCompatHelperApi17: void getRealSize(android.view.Display,android.graphics.Point)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.work.impl.utils.NetworkApi21: android.net.NetworkCapabilities getNetworkCapabilitiesCompat(android.net.ConnectivityManager,android.net.Network)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource valueOf(java.lang.String)
androidx.room.Index$Order: androidx.room.Index$Order[] values()
id.flutter.flutter_background_service.BootReceiver: BootReceiver()
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: void setBitErrorRate(int)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1(androidx.core.util.Consumer)
androidx.core.view.WindowInsetsCompat$BuilderImpl: androidx.core.view.WindowInsetsCompat build()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)
androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)
id.flutter.flutter_background_service.BuildConfig: BuildConfig()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: ExtensionEmbeddingBackend$EmbeddingCallbackImpl(androidx.window.embedding.ExtensionEmbeddingBackend)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean isValidDrawableResource(android.content.Context,java.lang.String,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
io.flutter.view.TextureRegistry$ImageTextureEntry: void release()
id.flutter.flutter_background_service.Config: long getBackgroundHandle()
androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)
androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: void setRssi(int)
id.flutter.flutter_background_service.BackgroundService$1: BackgroundService$1(id.flutter.flutter_background_service.BackgroundService)
androidx.core.content.ContextCompat$Api16Impl: void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int getRscpAsu()
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setLegacyStreamType(android.media.AudioAttributes$Builder,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotifications(io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
androidx.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM getBandGSM()
androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)
androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
androidx.work.impl.background.systemalarm.SystemAlarmService: SystemAlarmService()
androidx.core.app.NotificationManagerCompat$Api26Impl: java.lang.String getId(android.app.NotificationChannelGroup)
com.google.gson.reflect.TypeToken: TypeToken()
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: void setPci(java.lang.Integer)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setInboxStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.google.firebase.components.ComponentDiscoveryService: ComponentDiscoveryService()
androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getCsiRsrq()
androidx.window.layout.WindowInfoTrackerImpl: WindowInfoTrackerImpl(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: void setRscpAsu(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readChannelInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
com.sumanrajpathak.flutter_cell_info.models.CellData: double getRsrp()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setLac(java.lang.Integer)
androidx.core.view.ViewCompat$Api16Impl: void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void requestExactAlarmsPermission(com.dexterous.flutterlocalnotifications.PermissionRequestListener)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] $values()
androidx.window.embedding.ActivityRule: java.util.Set getFilters()
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getType(java.lang.Object)
io.flutter.view.AccessibilityBridge$StringAttribute: AccessibilityBridge$StringAttribute()
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setType(java.lang.String)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
id.flutter.flutter_background_service.WatchdogReceiver: void enqueue(android.content.Context)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBRAND(java.lang.String)
com.google.firebase.concurrent.ExecutorsRegistrar: ExecutorsRegistrar()
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void finalize()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setProgress(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
androidx.core.app.NotificationCompat$BigTextStyle$Api16Impl: android.app.Notification$BigTextStyle createBigTextStyle(android.app.Notification$Builder)
androidx.core.view.ViewCompat$Api19Impl: void notifySubtreeAccessibilityStateChanged(android.view.ViewParent,android.view.View,android.view.View,int)
id.flutter.flutter_background_service.BackgroundService$1: void onReceived(org.json.JSONObject)
com.google.android.gms.tasks.TaskCompletionSource: TaskCompletionSource()
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder createBuilder()
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: java.util.List getPrimaryCellList()
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: void setRscp(int)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setHARDWARE(java.lang.String)
androidx.window.layout.WindowLayoutInfo: java.lang.String toString()
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannelGroup(android.app.NotificationManager,android.app.NotificationChannelGroup)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException: GooglePlayServicesMissingManifestValueException()
androidx.collection.SimpleArrayMap: SimpleArrayMap()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readGroupingInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.sumanrajpathak.flutter_cell_info.models.common.Network: Network()
com.sumanrajpathak.flutter_cell_info.models.common.Signal: Signal()
androidx.window.layout.HardwareFoldingFeature: int hashCode()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails from(java.util.Map)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KDeclarationContainer getOwner()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDate(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getResId(java.lang.Object)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: boolean useAllowWhileIdle()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)
androidx.window.embedding.SplitController: void initialize(android.content.Context,int)
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
androidx.window.embedding.ActivityRule: boolean getAlwaysExpand()
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setDEVICE(java.lang.String)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] values()
com.google.android.gms.location.LocationRequest: LocationRequest()
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)
com.google.android.gms.internal.auth-api-phone.zzc: zzc()
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.sumanrajpathak.flutter_cell_info.models.CellData: double getEvdoEcio()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLedInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getEci()
androidx.window.layout.WindowMetrics: int hashCode()
androidx.core.app.NotificationCompat$BigPictureStyle$Api16Impl: android.app.Notification$BigPictureStyle setBigContentTitle(android.app.Notification$BigPictureStyle,java.lang.CharSequence)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map describeIcon(androidx.core.graphics.drawable.IconCompat)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void removeNotificationFromCache(android.content.Context,java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setID(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: void setTac(java.lang.Integer)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA: void setDownlinkUarfcn(int)
androidx.startup.InitializationProvider: InitializationProvider()
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getRscp()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
androidx.window.R$id: R$id()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: SidecarWindowBackend$WindowLayoutChangeCallbackWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotifications(android.content.Context,java.util.ArrayList)
androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)
androidx.arch.core.executor.ArchTaskExecutor: ArchTaskExecutor()
cz.mroczis.netmonster.core.feature.merge.CellSource: cz.mroczis.netmonster.core.feature.merge.CellSource[] values()
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)
androidx.core.app.RemoteInput$Api26Impl: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)
android.support.v4.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: void setLat(java.lang.Double)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.work.impl.background.systemalarm.ConstraintProxy$NetworkStateProxy: ConstraintProxy$NetworkStateProxy()
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
com.dexterous.flutterlocalnotifications.ForegroundService: ForegroundService()
androidx.core.app.NotificationManagerCompat$Api26Impl: java.util.List getNotificationChannelGroups(android.app.NotificationManager)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.String getCgi()
androidx.core.view.WindowInsetsCompat$Impl: boolean equals(java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getEvdoSnr()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: BaseContinuationImpl(kotlin.coroutines.Continuation)
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: void setBid(java.lang.Integer)
androidx.media.AudioAttributesCompat: AudioAttributesCompat()
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: int getCdmaRssi()
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
com.google.firebase.FirebaseCommonKtxRegistrar: java.util.List getComponents()
androidx.core.view.ViewCompat$Api19Impl: boolean isLayoutDirectionResolved(android.view.View)
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer getCi()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getRnc()
com.sumanrajpathak.flutter_cell_info.models.CellsTypeList: CellsTypeList()
androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)
androidx.core.view.ViewGroupCompat$Api21Impl: boolean isTransitionGroup(android.view.ViewGroup)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
io.flutter.embedding.engine.FlutterEngineGroupCache: FlutterEngineGroupCache()
androidx.core.util.ObjectsCompat$Api19Impl: boolean equals(java.lang.Object,java.lang.Object)
androidx.core.view.ViewCompat$Api21Impl: float getZ(android.view.View)
fr.bmartel.speedtest.model.FtpMode: fr.bmartel.speedtest.model.FtpMode valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEcio(int)
com.google.android.gms.internal.base.zac: zac()
io.flutter.embedding.engine.FlutterJNI: void loadLibrary()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSmallIcon(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
id.flutter.flutter_background_service.Pipe$PipeListener: void onReceived(org.json.JSONObject)
androidx.core.view.ViewCompat$Api16Impl: void postOnAnimation(android.view.View,java.lang.Runnable)
kotlin.internal.PlatformImplementations: PlatformImplementations()
androidx.core.text.TextUtilsCompat$Api17Impl: int getLayoutDirectionFromLocale(java.util.Locale)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setTimeoutAfter(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.room.RoomDatabase: RoomDatabase()
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
id.flutter.flutter_background_service.BackgroundService: void onCreate()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KFunction getReflected()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getBandDownlinkArfcn()
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion()
com.dexterous.flutterlocalnotifications.models.IconSource: IconSource(java.lang.String,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map extractNotificationResponseMap(android.content.Intent)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer getRnc()
androidx.window.embedding.SplitInfo: boolean equals(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)
org.apache.commons.net.ftp.FTPCmd: org.apache.commons.net.ftp.FTPCmd[] values()
androidx.core.app.NotificationManagerCompat$Api24Impl: boolean areNotificationsEnabled(android.app.NotificationManager)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRsrq(double)
kotlin.jvm.internal.CallableReference: CallableReference()
cz.mroczis.netmonster.core.model.model.CellError: cz.mroczis.netmonster.core.model.model.CellError valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeStableInsets()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setSsRsrq(int)
fr.bmartel.speedtest.model.FtpMode: fr.bmartel.speedtest.model.FtpMode[] values()
androidx.media.AudioAttributesImplApi21: AudioAttributesImplApi21()
androidx.concurrent.futures.AbstractResolvableFuture: AbstractResolvableFuture()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] values()
cz.mroczis.netmonster.core.model.model.CellError: cz.mroczis.netmonster.core.model.model.CellError[] values()
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA: BandTDSCDMA()
androidx.window.embedding.SplitPairFilter: boolean matchesActivityIntentPair(android.app.Activity,android.content.Intent)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy valueOf(java.lang.String)
androidx.fragment.app.Fragment: Fragment()
id.flutter.flutter_background_service.Config: boolean isAutoStartOnBoot()
androidx.core.app.RemoteInput$Api16Impl: android.content.ClipData getClipData(android.content.Intent)
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
kotlin.jvm.internal.FunctionReference: boolean isOperator()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void pushImage(android.media.Image)
androidx.window.layout.SidecarWindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
io.flutter.plugin.platform.PlatformViewWrapper: android.view.ViewTreeObserver$OnGlobalFocusChangeListener getActiveFocusListener()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setMANUFACTURER(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getPsc()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR: void setDownlinkArfcn(int)
androidx.core.view.WindowInsetsCompat$Impl: boolean isConsumed()
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBid(java.lang.Integer)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()
androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCsiRsrp(int)
androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double getLongitude()
androidx.window.layout.ActivityCompatHelperApi30: ActivityCompatHelperApi30()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
androidx.core.app.NotificationCompat$CallStyle$Api23Impl: android.app.Notification$Action$Builder createActionBuilder(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)
com.google.gson.JsonElement: JsonElement()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getWidth()
com.sumanrajpathak.flutter_cell_info.models.common.Band: void setNumber(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void release()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getBid()
androidx.window.embedding.SplitInfo: int hashCode()
androidx.core.view.ViewCompat$Api21Impl: void setNestedScrollingEnabled(android.view.View,boolean)
androidx.core.view.ViewCompat$Api21Impl: float getTranslationZ(android.view.View)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: SignalWCDMA()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: WindowMetricsCalculator$Companion$decorator$1()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setBandWCDMA(com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA)
androidx.work.impl.background.systemjob.SystemJobService$Api24Impl: android.net.Uri[] getTriggeredContentUris(android.app.job.JobParameters)
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void areNotificationsEnabled(io.flutter.plugin.common.MethodChannel$Result)
androidx.work.NetworkType: androidx.work.NetworkType[] values()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setMODEL(java.lang.String)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] values()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setTimeoutAfter(android.app.Notification$Builder,long)
com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA: BandWCDMA()
androidx.window.embedding.SplitController: SplitController(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)
androidx.core.content.ContextCompat$Api16Impl: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setSize(int,int)
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationChannels(io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigPictureStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.core.view.ViewCompat$Api21Impl: boolean isImportantForAccessibility(android.view.View)
androidx.core.app.NotificationCompat$MessagingStyle$Api16Impl: void setBuilder(android.app.Notification$Style,android.app.Notification$Builder)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
androidx.fragment.app.FragmentActivity: FragmentActivity()
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval[] values()
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)
androidx.core.app.ActivityCompat$Api16Impl: void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle)
id.flutter.flutter_background_service.Config: void setForegroundNotificationId(int)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setNcc(java.lang.Integer)
kotlinx.coroutines.ExecutorCoroutineDispatcher: ExecutorCoroutineDispatcher()
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map access$200(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: WindowMetricsCalculator$Companion$reset$1()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
androidx.core.view.ViewCompat$Api21Impl$1: ViewCompat$Api21Impl$1(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()
id.flutter.flutter_background_service.Config: void setInitialNotificationContent(java.lang.String)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl(androidx.core.view.WindowInsetsCompat)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: void run()
androidx.window.layout.WindowLayoutInfo: WindowLayoutInfo(java.util.List)
androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult[] values()
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setArfcn(int)
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateNextNotificationTrigger(long,long)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable getReflected()
androidx.window.embedding.ActivityFilter: boolean matchesActivity(android.app.Activity)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes build(android.media.AudioAttributes$Builder)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void requestNotificationsPermission(com.dexterous.flutterlocalnotifications.PermissionRequestListener)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getIso()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.core.app.AlarmManagerCompat$Api23Impl: void setAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: void setBand(com.sumanrajpathak.flutter_cell_info.models.common.Band)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA getSignalCDMA()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
androidx.core.graphics.drawable.IconCompat$Api30Impl: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)
androidx.core.location.LocationCompat$Api18Impl: boolean isMock(android.location.Location)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: void setSid(java.lang.Integer)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void maybeCreateReader()
androidx.window.layout.SidecarCompat: void register(android.os.IBinder,android.app.Activity)
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void registerWith(io.flutter.embedding.engine.FlutterEngine)
com.jaumard.smsautofill.SmsAutoFillPlugin: SmsAutoFillPlugin()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getRssi()
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: void setPrimaryCellList(java.util.List)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
com.baseflow.geolocator.permission.LocationPermission: com.baseflow.geolocator.permission.LocationPermission valueOf(java.lang.String)
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getTac()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getBcc()
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean sendNotificationPayloadMessage(android.content.Intent)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
kotlin.jvm.internal.Intrinsics: Intrinsics()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,androidx.core.util.Consumer,kotlinx.coroutines.flow.Flow)
androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] values()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setLat(java.lang.Double)
androidx.core.app.ActivityCompat$Api23Impl: void onSharedElementsReady(java.lang.Object)
androidx.window.layout.WindowInfoTracker$Companion: WindowInfoTracker$Companion()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getCsiSinr()
androidx.core.app.NotificationCompat$MessagingStyle: NotificationCompat$MessagingStyle()
androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id()
com.baseflow.geolocator.errors.ErrorCodes: com.baseflow.geolocator.errors.ErrorCodes[] values()
io.flutter.plugins.firebase.core.GeneratedAndroidFirebaseCore$PigeonInitializeResponse: GeneratedAndroidFirebaseCore$PigeonInitializeResponse()
androidx.core.app.NotificationCompat$CallStyle$Api28Impl: android.os.Parcelable castToParcelable(android.app.Person)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int getRssiAsu()
com.sumanrajpathak.flutter_cell_info.models.CellType: void setTdscdma(com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int getRssi()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle[] values()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer getRnc()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.text.Spanned fromHtml(java.lang.String)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetRight(android.view.DisplayCutout)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: void setNci(java.lang.Long)
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void checkCanScheduleExactAlarms(android.app.AlarmManager)
com.sumanrajpathak.flutter_cell_info.models.CellsTypeList: void setPrimaryCellList(java.util.List)
androidx.core.view.WindowInsetsCompat$Impl20: boolean isTypeVisible(int)
androidx.core.view.ViewCompat$Api28Impl: boolean isAccessibilityHeading(android.view.View)
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: ScheduledNotificationReceiver()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setLights(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.layout.SidecarWindowBackend: void callbackRemovedForActivity(android.app.Activity)
androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer getCi()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getPci()
androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
androidx.window.embedding.SplitPairRule: boolean getFinishPrimaryWithSecondary()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: void setSignalNR(com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: BigPictureStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Boolean)
androidx.window.R: R()
androidx.work.InputMerger: InputMerger()
com.sumanrajpathak.flutter_cell_info.models.common.Network: void setMcc(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEcgi(java.lang.String)
dev.fluttercommunity.workmanager.BackgroundWorker: BackgroundWorker(android.content.Context,androidx.work.WorkerParameters)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityHeading(android.view.View,boolean)
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: java.util.List getNeighboringCellList()
androidx.window.embedding.SplitInfo: java.lang.String toString()
androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult[] values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()
androidx.window.layout.SidecarWindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
fr.bmartel.speedtest.model.UploadStorageType: fr.bmartel.speedtest.model.UploadStorageType valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
com.sumanrajpathak.flutter_cell_info.models.CellData: double getSnr()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int getTimingAdvance()
id.flutter.flutter_background_service.BackgroundService: int onStartCommand(android.content.Intent,int,int)
androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRsrpAsu(int)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeatNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: void setLon(java.lang.Double)
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setRsrp(double)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBsic(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getHOST()
androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()
com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: AbstractSafeParcelable()
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.HashMap getMappedNotificationChannel(android.app.NotificationChannel)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.net.Uri retrieveSoundResourceUri(android.content.Context,java.lang.String,com.dexterous.flutterlocalnotifications.models.SoundSource)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map describePerson(androidx.core.app.Person)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTint(android.graphics.drawable.Drawable,int)
androidx.window.embedding.ActivityFilter: java.lang.String toString()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setPsc(java.lang.Integer)
id.flutter.flutter_background_service.Config: void setBackgroundHandle(long)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getSsRsrq()
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)
com.google.android.gms.maps.GoogleMapOptions: GoogleMapOptions()
com.google.gson.Gson$FutureTypeAdapter: Gson$FutureTypeAdapter()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeat(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean)
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
kotlinx.coroutines.CancelHandler: CancelHandler()
androidx.window.layout.WindowLayoutInfo: int hashCode()
androidx.core.app.RemoteInput$Api20Impl: void addResultsToIntent(java.lang.Object,android.content.Intent,android.os.Bundle)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl()
androidx.window.R$attr: R$attr()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)
kotlin.jvm.internal.FunctionReference: boolean equals(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void showNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: WindowInsetsCompat$BuilderImpl29()
androidx.core.app.NotificationCompatBuilder$Api16Impl: android.app.Notification$Builder setUsesChronometer(android.app.Notification$Builder,boolean)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getUNKNOWN()
androidx.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
vn.hunghd.flutterdownloader.DownloadStatus: vn.hunghd.flutterdownloader.DownloadStatus[] values()
_COROUTINE._BOUNDARY: _BOUNDARY()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)
androidx.window.embedding.SplitController$Companion: SplitController$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.app.NotificationCompatBuilder$Api28Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,android.app.Person)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBandNumber(int)
androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
com.baseflow.geolocator.location.ServiceStatus: com.baseflow.geolocator.location.ServiceStatus[] values()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getCsiRsrq()
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()
com.google.android.gms.common.internal.zzk: zzk()
cz.mroczis.netmonster.core.feature.merge.CellSource: cz.mroczis.netmonster.core.feature.merge.CellSource valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
cz.mroczis.netmonster.core.model.signal.SignalNr: SignalNr()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()
com.dexterous.flutterlocalnotifications.models.ScheduleMode: ScheduleMode(java.lang.String,int)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
androidx.window.embedding.ActivityStack: java.lang.String toString()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getEcgi()
androidx.core.view.WindowInsetsCompat$Impl: boolean isRound()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()
kotlin.collections.AbstractMutableSet: AbstractMutableSet()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
androidx.loader.content.ModernAsyncTask$Status: androidx.loader.content.ModernAsyncTask$Status valueOf(java.lang.String)
id.flutter.flutter_background_service.R$string: R$string()
androidx.core.view.WindowInsetsCompat$Impl: void setRootViewData(androidx.core.graphics.Insets)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.core.view.WindowInsetsCompat$Impl: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.ArrayList loadScheduledNotifications(android.content.Context)
androidx.core.view.ViewCompat$Api16Impl: boolean hasOverlappingRendering(android.view.View)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
androidx.window.layout.WindowInfoTracker$Companion: void reset()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
androidx.core.app.NotificationCompat$CallStyle$Api23Impl: android.os.Parcelable castToParcelable(android.graphics.drawable.Icon)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: FlutterFirebasePluginRegistry()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: FlutterBackgroundServicePlugin()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelAllNotifications(io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
androidx.window.embedding.ActivityFilter: int hashCode()
androidx.core.view.WindowInsetsCompat$Impl29: void setStableInsets(androidx.core.graphics.Insets)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: NotificationChannelAction(java.lang.String,int)
androidx.core.view.ViewCompat$Api16Impl: android.view.ViewParent getParentForAccessibility(android.view.View)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$didReinitializeFirebaseCore$1(com.google.android.gms.tasks.TaskCompletionSource)
androidx.window.layout.SidecarCompat: void registerConfigurationChangeListener(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetHeight()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
androidx.core.app.AppOpsManagerCompat$Api29Impl: java.lang.String getOpPackageName(android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setTac(java.lang.Integer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLedDetails(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnFrameConsumedListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnFrameConsumedListener)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Intent getLaunchIntent(android.content.Context)
androidx.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
id.flutter.flutter_background_service.BackgroundService: void updateNotificationInfo()
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: void setEvdoEcio(double)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image acquireLatestImage()
androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR: int getDownlinkFrequency()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setPRODUCT(java.lang.String)
androidx.window.embedding.SplitController: void setStaticSplitRules(java.util.Set)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails from(java.util.Map)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setBadgeIconType(android.app.Notification$Builder,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBandName(java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: SignalGSM()
androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()
androidx.core.app.NotificationCompat$BigTextStyle$Api16Impl: android.app.Notification$BigTextStyle setBigContentTitle(android.app.Notification$BigTextStyle,java.lang.CharSequence)
androidx.window.layout.HardwareFoldingFeature$Type: HardwareFoldingFeature$Type(java.lang.String)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: android.graphics.SurfaceTexture surfaceTexture()
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: BooleanUtils()
androidx.core.app.NotificationManagerCompat$Api26Impl: void deleteNotificationChannelGroup(android.app.NotificationManager,java.lang.String)
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setSsSinr(int)
androidx.window.embedding.SplitController: SplitController()
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOpNoThrow(android.app.AppOpsManager,java.lang.String,java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.common.Cell: java.lang.Integer getSubscriptionId()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void pendingNotificationRequests(io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
id.flutter.flutter_background_service.Config: java.lang.String getInitialNotificationContent()
com.shaz.plugin.fist.flutter_internet_speed_test.ListenerEnum: com.shaz.plugin.fist.flutter_internet_speed_test.ListenerEnum[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onNewIntent(android.content.Intent)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
org.apache.commons.net.ftp.FTPClient: FTPClient()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setDownlinkEarfcn(int)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()
kotlin.collections.builders.MapBuilder: MapBuilder()
androidx.window.embedding.EmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getCsiRsrpAsu()
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: void setEvdoSnr(int)
androidx.work.impl.background.systemalarm.RescheduleReceiver: RescheduleReceiver()
androidx.work.impl.diagnostics.DiagnosticsReceiver: DiagnosticsReceiver()
androidx.core.app.ComponentActivity: ComponentActivity()
androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)
id.flutter.flutter_background_service.R$styleable: R$styleable()
com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA: void setDownlinkUarfcn(int)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int)
id.flutter.flutter_background_service.R$color: R$color()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNextRepeatingNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCPU_ABI(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupAlarm(com.dexterous.flutterlocalnotifications.models.NotificationDetails,android.app.AlarmManager,long,android.app.PendingIntent)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getMnc()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle forScreeningCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
id.flutter.flutter_background_service.BackgroundService: boolean onUnbind(android.content.Intent)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader29()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)
androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)
androidx.core.content.ContextCompat$Api24Impl: boolean isDeviceProtectedStorage(android.content.Context)
androidx.core.graphics.drawable.IconCompat$Api28Impl: java.lang.String getResPackage(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.graphics.drawable.IconCompat getIconFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
kotlinx.coroutines.scheduling.WorkQueue: WorkQueue()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
androidx.core.view.WindowInsetsCompat$Impl: void setOverriddenInsets(androidx.core.graphics.Insets[])
androidx.room.MultiInstanceInvalidationService: MultiInstanceInvalidationService()
androidx.window.embedding.EmbeddingBackend: void setSplitRules(java.util.Set)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()
androidx.window.embedding.SplitController: void removeSplitListener(androidx.core.util.Consumer)
com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE: void setDownlinkEarfcn(int)
androidx.core.view.WindowInsetsCompat$Impl20: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: MessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean,java.lang.Boolean)
androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)
androidx.core.view.ViewCompat$Api21Impl: boolean hasNestedScrollingParent(android.view.View)
kotlin.jvm.internal.CallableReference: java.lang.String getName()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setCid(java.lang.Integer)
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void setContentDescription(android.app.Notification$BigPictureStyle,java.lang.CharSequence)
androidx.core.content.ContextCompat$Api21Impl: java.io.File getCodeCacheDir(android.content.Context)
androidx.core.util.ObjectsCompat$Api19Impl: int hash(java.lang.Object[])
androidx.window.layout.WindowMetrics: WindowMetrics(androidx.window.core.Bounds)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.work.WorkInfo$State: androidx.work.WorkInfo$State valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)
androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readPlatformSpecifics(java.util.Map,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.String permissionToOp(java.lang.String)
com.baseflow.geolocator.permission.LocationPermission: com.baseflow.geolocator.permission.LocationPermission[] values()
androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double getLat()
com.baseflow.geolocator.location.ServiceStatus: com.baseflow.geolocator.location.ServiceStatus valueOf(java.lang.String)
androidx.core.location.LocationManagerCompat$Api31Impl: boolean hasProvider(android.location.LocationManager,java.lang.String)
androidx.work.impl.utils.ForceStopRunnable$BroadcastReceiver: ForceStopRunnable$BroadcastReceiver()
androidx.window.layout.WindowMetricsCalculator$-CC: void reset()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void initialize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.layout.HardwareFoldingFeature: HardwareFoldingFeature(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
androidx.work.impl.Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()
androidx.work.Operation$State$SUCCESS: Operation$State$SUCCESS()
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)
androidx.window.layout.WindowMetricsCalculatorCompat: void getRectSizeFromDisplay(android.app.Activity,android.graphics.Rect)
androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
androidx.window.embedding.SplitRule: int getLayoutDirection()
com.google.android.gms.internal.common.zzc: zzc()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1(androidx.window.layout.SidecarCompat,android.app.Activity)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
id.flutter.flutter_background_service.Config: void setNotificationChannelId(java.lang.String)
androidx.work.ExistingWorkPolicy: androidx.work.ExistingWorkPolicy[] values()
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
androidx.core.app.NotificationCompat$CallStyle$Api16Impl: void setBuilder(android.app.Notification$CallStyle,android.app.Notification$Builder)
androidx.core.os.ConfigurationCompat$Api24Impl: android.os.LocaleList getLocales(android.content.res.Configuration)
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: FragmentTransition$FragmentContainerTransition()
androidx.core.view.ViewCompat$Api16Impl: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver,android.view.ViewTreeObserver$OnGlobalLayoutListener)
id.flutter.flutter_background_service.R$dimen: R$dimen()
com.sumanrajpathak.flutter_cell_info.models.common.Band: void setChannelNumber(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getSsRsrp()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBandDownlinkFrequency(int)
androidx.window.core.Bounds: int getLeft()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getMcc()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSERIAL(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.models.NotificationDetails extractNotificationDetails(io.flutter.plugin.common.MethodChannel$Result,java.util.Map)
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor valueOf(java.lang.String)
androidx.core.view.ViewGroupCompat$Api21Impl: int getNestedScrollAxes(android.view.ViewGroup)
com.google.android.gms.common.api.internal.zzd: zzd()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer getCgi()
androidx.work.impl.utils.futures.AbstractFuture$Waiter: AbstractFuture$Waiter()
com.google.android.gms.common.api.ResultTransform: ResultTransform()
kotlin.jvm.internal.FunctionReference: boolean isInline()
androidx.window.layout.WindowMetrics: WindowMetrics(android.graphics.Rect)
androidx.core.app.NotificationCompat$CallStyle$Api21Impl: android.app.Notification$Builder setCategory(android.app.Notification$Builder,java.lang.String)
androidx.window.embedding.SplitPairRule: boolean getClearTop()
androidx.core.view.ViewCompat$Api28Impl: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomContentView(android.app.Notification$Builder,android.widget.RemoteViews)
androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getSsSinr()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
io.flutter.view.TextureRegistry$ImageTextureEntry: void pushImage(android.media.Image)
io.flutter.embedding.engine.FlutterJNI: java.lang.String getVMServiceUri()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion()
androidx.core.app.NotificationManagerCompat$Api26Impl: java.lang.String getId(android.app.NotificationChannel)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()
id.flutter.flutter_background_service.R$drawable: R$drawable()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: CellLTE()
androidx.core.app.RemoteInput$Api16Impl: void setClipData(android.content.Intent,android.content.ClipData)
androidx.window.core.Version: boolean equals(java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setCi(java.lang.Integer)
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
androidx.core.location.LocationCompat$Api26Impl: float getVerticalAccuracyMeters(android.location.Location)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
io.flutter.embedding.engine.FlutterJNI: void updateDisplayMetrics(int,float,float,float)
id.flutter.flutter_background_service.R$attr: R$attr()
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setRemoteInputHistory(android.app.Notification$Builder,java.lang.CharSequence[])
com.sumanrajpathak.flutter_cell_info.models.CellData: int getBitErrorRate()
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeature(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDisplayFeature)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder addExtras(android.app.Notification$Action$Builder,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void registerImageTexture(long,io.flutter.view.TextureRegistry$ImageConsumer)
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigPictureStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getCqi()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getBRAND()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,android.view.View$OnFocusChangeListener)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setAnswerButtonColorHint(android.app.Notification$CallStyle,int)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)
androidx.window.layout.FoldingFeature$OcclusionType: FoldingFeature$OcclusionType(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()
androidx.core.net.ConnectivityManagerCompat$Api16Impl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)
androidx.window.core.Version$Companion: Version$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
id.flutter.flutter_background_service.BackgroundService: void onDestroy()
androidx.work.WorkManagerInitializer: WorkManagerInitializer()
android.support.v4.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setIso(java.lang.String)
com.google.gson.JsonObject: JsonObject()
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidRawSoundResource(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.work.impl.background.systemjob.SystemJobService$Api24Impl: java.lang.String[] getTriggeredContentAuthorities(android.app.job.JobParameters)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
androidx.core.app.RemoteInput$Api26Impl: java.util.Set getAllowedDataTypes(java.lang.Object)
kotlin.collections.AbstractMutableList: AbstractMutableList()
com.sumanrajpathak.flutter_cell_info.models.CellType: void setCdma(com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Double getLat()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void waitOnFence(android.media.Image)
android.support.v4.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getConnectionStatus()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.core.view.ViewCompat$Api19Impl: boolean isLaidOut(android.view.View)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] values()
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getID()
androidx.core.app.NotificationCompat$InboxStyle$Api16Impl: android.app.Notification$InboxStyle addLine(android.app.Notification$InboxStyle,java.lang.CharSequence)
androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(androidx.core.util.Consumer)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getDISPLAY()
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int getRscpAsu()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void access$000(id.flutter.flutter_background_service.FlutterBackgroundServicePlugin,org.json.JSONObject)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getTimingAdvance()
androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()
androidx.core.content.ContextCompat$Api24Impl: java.io.File getDataDir(android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: CellNR()
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: void setRssi(int)
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()
androidx.window.layout.WindowMetricsCalculator$Companion: WindowMetricsCalculator$Companion()
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: SignalCDMA()
androidx.core.app.AlarmManagerCompat$Api21Impl: void setAlarmClock(android.app.AlarmManager,java.lang.Object,android.app.PendingIntent)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDateMatchingDateTimeComponents(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.view.TextureRegistry$SurfaceProducer: void release()
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion()
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
androidx.window.embedding.ActivityRule: int hashCode()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails fromNotificationDetails(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
kotlinx.coroutines.internal.OpDescriptor: OpDescriptor()
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Action$Builder setAllowGeneratedReplies(android.app.Notification$Action$Builder,boolean)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getDownlinkEarfcn()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readMessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setPci(java.lang.Integer)
com.lyokone.location.FlutterLocationService: FlutterLocationService()
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object)
androidx.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.work.impl.foreground.SystemForegroundService: SystemForegroundService()
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: void setDisplayName(java.lang.String)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setIsVideo(android.app.Notification$CallStyle,boolean)
androidx.window.layout.WindowMetricsCalculator$-CC: androidx.window.layout.WindowMetricsCalculator getOrCreate()
androidx.window.embedding.ExtensionEmbeddingBackend: void setSplitRules(java.util.Set)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEvdoRssi(int)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] values()
androidx.core.graphics.drawable.IconCompat: IconCompat()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getRsrpAsu()
io.flutter.plugin.platform.PlatformViewWrapper: void setTouchProcessor(io.flutter.embedding.android.AndroidTouchProcessor)
com.dexterous.flutterlocalnotifications.models.RepeatInterval: RepeatInterval(java.lang.String,int)
com.google.android.gms.internal.location.zzeu: zzeu()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder createBuilder(int,java.lang.CharSequence,android.app.PendingIntent)
io.flutter.view.TextureRegistry$SurfaceProducer: long id()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readColor(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setActivity(android.app.Activity)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer[] values()
androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVisibility(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,java.lang.String)
android.support.v4.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int getRssiAsu()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEnb(java.lang.Integer)
androidx.work.impl.utils.futures.AbstractFuture: AbstractFuture()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int getRssiAsu()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setGroup(android.app.Notification$Builder,java.lang.String)
kotlinx.coroutines.CoroutineDispatcher: CoroutineDispatcher()
com.google.android.gms.common.api.Api$AbstractClientBuilder: Api$AbstractClientBuilder()
androidx.window.layout.DisplayCompatHelperApi17: DisplayCompatHelperApi17()
androidx.window.layout.FoldingFeature$State: FoldingFeature$State(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getType()
fr.bmartel.speedtest.model.SpeedTestError: fr.bmartel.speedtest.model.SpeedTestError[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
com.dexterous.flutterlocalnotifications.models.Time: Time()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int getBitErrorRate()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
com.google.android.gms.auth.api.signin.internal.SignInHubActivity: SignInHubActivity()
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy[] values()
androidx.window.embedding.SplitRule: int hashCode()
androidx.core.app.NotificationCompat$BigPictureStyle$Api23Impl: void setBigLargeIcon(android.app.Notification$BigPictureStyle,android.graphics.drawable.Icon)
androidx.window.embedding.SplitController: boolean isSplitSupported()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getRELEASE()
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation)
androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
com.aledev.network_type_reachability.NetworkState: com.aledev.network_type_reachability.NetworkState[] values()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getNid()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()
kotlin.collections.builders.ListBuilder: ListBuilder()
androidx.window.embedding.SplitInfo: SplitInfo(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)
androidx.browser.browseractions.BrowserActionsFallbackMenuView: BrowserActionsFallbackMenuView(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Notification createNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.core.view.WindowInsetsCompat$Impl30: boolean isVisible(int)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)
androidx.core.app.NotificationCompat$CallStyle$Api21Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$102(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM: BandGSM()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreFling(android.view.View,float,float)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: FlutterRenderer$ImageTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setSignalLTE(com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel,androidx.window.layout.WindowLayoutInfo)
androidx.core.app.NotificationCompat$MessagingStyle$Api28Impl: android.app.Notification$MessagingStyle createMessagingStyle(android.app.Person)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer getBsic()
dev.fluttercommunity.workmanager.Extractor$PossibleWorkManagerCall: dev.fluttercommunity.workmanager.Extractor$PossibleWorkManagerCall[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: void setBitErrorRate(int)
com.sumanrajpathak.flutter_cell_info.models.CellType: void setLte(com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson buildGson()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setSsRsrpAsu(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivityForConfigChanges()
com.google.gson.JsonArray: JsonArray()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setUNKNOWN(java.lang.String)
androidx.window.embedding.MatcherUtils: MatcherUtils()
com.google.android.gms.maps.internal.zzcb: zzcb()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE getSignal()
androidx.window.core.Version: java.lang.String getDescription()
kotlinx.coroutines.scheduling.Task: Task()
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR: int getDownlinkArfcn()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean launchedActivityFromHistory(android.content.Intent)
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEvdoSnr(int)
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void showBigPictureWhenCollapsed(android.app.Notification$BigPictureStyle,boolean)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDeviceState(androidx.window.sidecar.SidecarDeviceState,androidx.window.sidecar.SidecarDeviceState)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getRscpAsu()
org.apache.commons.net.ftp.FTPFile: FTPFile()
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setBsic(java.lang.Integer)
androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()
com.sumanrajpathak.flutter_cell_info.models.common.Band: java.lang.String getName()
com.google.firebase.FirebaseCommonKtxRegistrar: FirebaseCommonKtxRegistrar()
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
kotlinx.coroutines.internal.AtomicOp: AtomicOp()
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setCid(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setRssiAsu(int)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: ScheduledNotificationBootReceiver()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setCi(java.lang.Integer)
kotlinx.coroutines.CompletionHandlerBase: CompletionHandlerBase()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)
androidx.media.AudioAttributesImplApi26: AudioAttributesImplApi26()
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)
kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()
androidx.work.impl.WorkDatabase_Impl: WorkDatabase_Impl()
androidx.window.layout.ActivityCompatHelperApi24: ActivityCompatHelperApi24()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: int getRssi()
androidx.work.impl.background.systemalarm.ConstraintProxy: ConstraintProxy()
androidx.core.app.AlarmManagerCompat$Api19Impl: void setExact(android.app.AlarmManager,int,long,android.app.PendingIntent)
androidx.core.app.NotificationCompat$DecoratedCustomViewStyle$Api15Impl: void setContentDescription(android.widget.RemoteViews,int,java.lang.CharSequence)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getUSER()
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Integer getNid()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
androidx.window.embedding.ActivityRule: boolean equals(java.lang.Object)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)
com.sumanrajpathak.flutter_cell_info.models.common.Network: void setIso(java.lang.String)
id.flutter.flutter_background_service.R$style: R$style()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLargeIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
androidx.work.impl.workers.DiagnosticsWorker: DiagnosticsWorker(android.content.Context,androidx.work.WorkerParameters)
androidx.core.content.ContextCompat$Api26Impl: android.content.Intent registerReceiver(android.content.Context,android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)
com.google.firebase.provider.FirebaseInitProvider: FirebaseInitProvider()
kotlinx.coroutines.internal.CtorCache: CtorCache()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setSignalWCDMA(com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA)
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int)
androidx.core.app.NotificationCompatBuilder$Api31Impl: android.app.Notification$Builder setForegroundServiceBehavior(android.app.Notification$Builder,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMessagingStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.work.Worker: Worker(android.content.Context,androidx.work.WorkerParameters)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setNid(java.lang.Integer)
androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] values()
androidx.core.app.NotificationCompat$BubbleMetadata$Api29Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
androidx.core.app.NotificationCompat$MessagingStyle$Api16Impl: android.app.Notification$BigTextStyle bigText(android.app.Notification$BigTextStyle,java.lang.CharSequence)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)
com.google.firebase.FirebaseCommonRegistrar: FirebaseCommonRegistrar()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspot(android.graphics.drawable.Drawable,float,float)
androidx.window.embedding.ActivityStack: boolean equals(java.lang.Object)
androidx.core.app.NotificationCompat$InboxStyle$Api16Impl: android.app.Notification$InboxStyle setBigContentTitle(android.app.Notification$InboxStyle,java.lang.CharSequence)
androidx.core.app.NotificationCompat$Style$Api16Impl: void setViewPadding(android.widget.RemoteViews,int,int,int,int,int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readSoundInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetLeft(android.view.DisplayCutout)
androidx.core.content.ContextCompat$Api33Impl: android.content.Intent registerReceiver(android.content.Context,android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: void onReceive(android.content.Context,android.content.Intent)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: AccessibilityBridge$CustomAccessibilityAction()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getCid()
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: DefaultStyleInformation(java.lang.Boolean,java.lang.Boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setCategory(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM: int getArfcn()
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setBubbleMetadata(android.app.Notification$Builder,android.app.Notification$BubbleMetadata)
com.google.android.gms.common.api.PendingResult: PendingResult()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.String getEcgi()
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Integer getSid()
androidx.core.location.LocationCompat$Api26Impl: boolean hasVerticalAccuracy(android.location.Location)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer getCallback()
androidx.work.impl.utils.Api28Impl: java.lang.String getProcessName()
androidx.window.layout.ExtensionInterfaceCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)
androidx.work.ExistingPeriodicWorkPolicy: androidx.work.ExistingPeriodicWorkPolicy[] values()
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
androidx.core.os.BundleCompat$Api18Impl: android.os.IBinder getBinder(android.os.Bundle,java.lang.String)
kotlin.jvm.internal.FunctionReference: boolean isInfix()
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRsrp(double)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setBandLTE(com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE)
androidx.core.app.RemoteInput$Api26Impl: android.app.RemoteInput$Builder setAllowDataType(android.app.RemoteInput$Builder,java.lang.String,boolean)
androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult valueOf(java.lang.String)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] values()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRscpAsu(int)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
id.flutter.flutter_background_service.BackgroundService: void lambda$receiveData$0(org.json.JSONObject)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: boolean validBounds(android.app.Activity,androidx.window.core.Bounds)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
androidx.window.embedding.MatcherUtils: boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity,android.content.ComponentName)
com.baseflow.geolocator.location.LocationAccuracy: com.baseflow.geolocator.location.LocationAccuracy valueOf(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void setImeVisibleListener(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.view.Surface getSurface()
androidx.fragment.app.FragmentManagerImpl: FragmentManagerImpl()
androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryChargingProxy: ConstraintProxy$BatteryChargingProxy()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()
androidx.lifecycle.ViewModelProvider$KeyedFactory: ViewModelProvider$KeyedFactory()
id.flutter.flutter_background_service.Pipe: void addListener(id.flutter.flutter_background_service.Pipe$PipeListener)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: double getRsrp()
io.flutter.view.TextureRegistry$SurfaceProducer: android.view.Surface getSurface()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Integer tryParseInt(java.lang.String)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: void setRscp(int)
androidx.core.app.NotificationCompatBuilder$Api16Impl: android.app.Notification$Builder setSubText(android.app.Notification$Builder,java.lang.CharSequence)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setGroupAlertBehavior(android.app.Notification$Builder,int)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
androidx.core.view.WindowInsetsCompat$Impl: boolean isVisible(int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
androidx.core.app.NotificationCompatBuilder$Api31Impl: android.app.Notification$Action$Builder setAuthenticationRequired(android.app.Notification$Action$Builder,boolean)
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRssi(int)
androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id()
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.view.ViewCompat$Api21Impl: void stopNestedScroll(android.view.View)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getCPU_ABI2()
androidx.core.app.NotificationCompatBuilder$Api19Impl: android.app.Notification$Builder setExtras(android.app.Notification$Builder,android.os.Bundle)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setCid(java.lang.Integer)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.Object invokeSuspend(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl28: boolean equals(java.lang.Object)
dev.fluttercommunity.workmanager.WorkManagerCall$Unknown: WorkManagerCall$Unknown()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getDownlinkUarfcn()
androidx.core.view.ViewCompat$Api16Impl: int getWindowSystemUiVisibility(android.view.View)
kotlin.jvm.internal.CallableReference: java.util.List getTypeParameters()
dev.fluttercommunity.workmanager.WorkManagerCall: WorkManagerCall()
androidx.core.app.NotificationCompatBuilder$Api16Impl: android.app.Notification build(android.app.Notification$Builder)
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer getCpid()
androidx.work.BackoffPolicy: androidx.work.BackoffPolicy valueOf(java.lang.String)
id.flutter.flutter_background_service.Pipe: void removeListener(id.flutter.flutter_background_service.Pipe$PipeListener)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)
com.shaz.plugin.fist.flutter_internet_speed_test.CallbacksEnum: com.shaz.plugin.fist.flutter_internet_speed_test.CallbacksEnum[] values()
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Long getNci()
androidx.work.impl.background.systemalarm.ConstraintProxy$StorageNotLowProxy: ConstraintProxy$StorageNotLowProxy()
androidx.core.view.ViewCompat$Api16Impl: int getMinimumHeight(android.view.View)
androidx.core.os.ConfigurationCompat$Api24Impl: void setLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)
com.google.maps.android.ui.RotationLayout: RotationLayout(android.content.Context,android.util.AttributeSet)
androidx.core.content.ContextCompat$Api24Impl: android.content.Context createDeviceProtectedStorageContext(android.content.Context)
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getObbDirs(android.content.Context)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
androidx.work.ListenableWorker$Result$Success: ListenableWorker$Result$Success()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
id.flutter.flutter_background_service.Config: void setAutoStartOnBoot(boolean)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: java.lang.Integer getCid()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: boolean canApplyTheme(android.graphics.drawable.Drawable)
androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode[] values()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void startForegroundService(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: int getMnc()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
androidx.core.view.ViewCompat$Api16Impl: void setBackground(android.view.View,android.graphics.drawable.Drawable)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setTimestamp(long)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: void setRssiAsu(int)
android.support.v4.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
androidx.window.embedding.SplitRule: boolean equals(java.lang.Object)
androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)
fr.bmartel.speedtest.model.UploadStorageType: fr.bmartel.speedtest.model.UploadStorageType[] values()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
com.sumanrajpathak.flutter_cell_info.models.CellData: void setLon(java.lang.Double)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.versionedparcelable.ParcelUtils: ParcelUtils()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails readPersonDetails(java.util.Map)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE getBandLTE()
kotlin.jvm.internal.CallableReference: boolean isSuspend()
com.sumanrajpathak.flutter_cell_info.models.CellType: void setNr(com.sumanrajpathak.flutter_cell_info.models.nr.CellNR)
fr.bmartel.protocol.http.states.HttpStates: fr.bmartel.protocol.http.states.HttpStates[] values()
com.baseflow.geolocator.location.LocationAccuracyStatus: com.baseflow.geolocator.location.LocationAccuracyStatus valueOf(java.lang.String)
androidx.core.app.ActivityCompat$Api32Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)
id.flutter.flutter_background_service.BackgroundService: BackgroundService()
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion()
androidx.window.embedding.ActivityStack: boolean contains(android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)
androidx.work.ListenableWorker$Result$Failure: ListenableWorker$Result$Failure()
androidx.work.WorkInfo$State: androidx.work.WorkInfo$State[] values()
id.flutter.flutter_background_service.BackgroundService: void onTaskRemoved(android.content.Intent)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEcno(int)
kotlin.jvm.internal.CallableReference: boolean isFinal()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getLac()
androidx.window.core.Bounds: boolean isEmpty()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getSubscriptionId()
id.flutter.flutter_background_service.WatchdogReceiver: WatchdogReceiver()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean canCreateNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
androidx.core.app.NotificationCompat$CallStyle$Api28Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,android.app.Person)
id.flutter.flutter_background_service.Pipe: void invoke(org.json.JSONObject)
androidx.window.embedding.SplitController: java.util.Set getSplitRules()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getSsRsrpAsu()
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: java.lang.Long getNci()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateDisplayMetrics(long)
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA getWcdma()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable computeReflected()
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void access$900(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer,io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setLocalOnly(android.app.Notification$Builder,boolean)
androidx.window.embedding.SplitController: void registerRule(androidx.window.embedding.EmbeddingRule)
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetWidth()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $values()
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetTop(android.view.DisplayCutout)
androidx.core.app.NotificationCompat$BigPictureStyle$Api16Impl: android.app.Notification$BigPictureStyle bigPicture(android.app.Notification$BigPictureStyle,android.graphics.Bitmap)
com.google.firebase.platforminfo.GlobalLibraryVersionRegistrar: GlobalLibraryVersionRegistrar()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getSsRsrq()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
androidx.collection.ArraySet: ArraySet()
com.shaz.plugin.fist.flutter_internet_speed_test.CallbacksEnum: com.shaz.plugin.fist.flutter_internet_speed_test.CallbacksEnum valueOf(java.lang.String)
io.flutter.view.TextureRegistry$ImageTextureEntry: long id()
io.flutter.view.TextureRegistry$ImageConsumer: android.media.Image acquireLatestImage()
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: int getTimingAdvance()
id.flutter.flutter_background_service.Config: void setIsForeground(boolean)
androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)
androidx.window.embedding.ActivityFilter: boolean matchesIntent(android.content.Intent)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
com.google.gson.JsonNull: JsonNull()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetBottom(android.view.DisplayCutout)
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion()
com.baseflow.geolocator.errors.ErrorCodes: com.baseflow.geolocator.errors.ErrorCodes valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setBandwidth(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.CellType: void setGsm(com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM)
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: SignalNR()
androidx.core.location.LocationCompat$Api26Impl: void removeBearingAccuracy(android.location.Location)
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setLongitude(java.lang.Double)
androidx.core.app.NotificationCompat$CallStyle: NotificationCompat$CallStyle()
androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
kotlinx.coroutines.internal.ThreadSafeHeap: ThreadSafeHeap()
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] values()
androidx.core.view.ViewCompat$Api21Impl: void setZ(android.view.View,float)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: CellGSM()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSnr(double)
androidx.fragment.app.FragmentTransitionImpl: FragmentTransitionImpl()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCsiSinr(int)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
androidx.core.app.NotificationCompat$MessagingStyle$Api26Impl: android.app.Notification$MessagingStyle addHistoricMessage(android.app.Notification$MessagingStyle,android.app.Notification$MessagingStyle$Message)
androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)
androidx.window.core.Version: java.math.BigInteger getBigInteger()
androidx.window.embedding.SplitRule: SplitRule()
androidx.window.core.Version: java.lang.String toString()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int readersToCloseSize()
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
androidx.core.view.ViewCompat$Api21Impl: float getElevation(android.view.View)
androidx.fragment.app.FragmentManagerState: FragmentManagerState()
androidx.window.layout.HardwareFoldingFeature: boolean isSeparating()
com.shaz.plugin.fist.flutter_internet_speed_test.ListenerEnum: com.shaz.plugin.fist.flutter_internet_speed_test.ListenerEnum valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
androidx.core.content.FileProvider$Api21Impl: java.io.File[] getExternalMediaDirs(android.content.Context)
androidx.work.impl.workers.CombineContinuationsWorker: CombineContinuationsWorker(android.content.Context,androidx.work.WorkerParameters)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer getLac()
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()
androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)
androidx.window.embedding.SplitPairRule: int hashCode()
androidx.window.layout.WindowInfoTrackerImpl: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellType: void setType(java.lang.String)
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Builder setSmallIcon(android.app.Notification$Builder,java.lang.Object)
androidx.core.os.UserManagerCompat$Api24Impl: boolean isUserUnlocked(android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.nr.BandNR: void setDownlinkFrequency(int)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
androidx.core.location.LocationCompat$Api26Impl: boolean hasSpeedAccuracy(android.location.Location)
androidx.window.embedding.SplitController: void clearRegisteredRules()
androidx.core.app.ActivityCompat$Api16Impl: void finishAffinity(android.app.Activity)
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
com.google.android.gms.common.api.internal.BasePendingResult: BasePendingResult()
androidx.window.embedding.SplitPairRule: java.util.Set getFilters()
androidx.lifecycle.LifecycleService: LifecycleService()
androidx.core.text.ICUCompat$Api21Impl: java.lang.String getScript(java.util.Locale)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $values()
com.sumanrajpathak.flutter_cell_info.models.CellData: double getCdmaEcio()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion()
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()
androidx.activity.ComponentActivity$NonConfigurationInstances: ComponentActivity$NonConfigurationInstances()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void rescheduleNotifications(android.content.Context)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)
id.flutter.flutter_background_service.Config: boolean isManuallyStopped()
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setLocusId(android.app.Notification$Builder,java.lang.Object)
androidx.browser.customtabs.CustomTabsIntent$Api24Impl: java.lang.String getDefaultLocale()
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: java.lang.Double getLon()
androidx.window.core.Version: int getPatch()
androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.ArrayList readMessages(java.util.ArrayList)
id.flutter.flutter_background_service.R$integer: R$integer()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setLac(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.CellsResponse: CellsResponse()
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
androidx.core.app.ServiceCompat$Api34Impl: void startForeground(android.app.Service,int,android.app.Notification,int)
androidx.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryNotLowProxy: ConstraintProxy$BatteryNotLowProxy()
androidx.window.layout.WindowMetricsCalculator$Companion: void reset()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeatures(java.util.List,java.util.List)
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int,kotlin.coroutines.Continuation)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarWindowLayoutInfo(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarWindowLayoutInfo)
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)
androidx.core.app.ActivityCompat$Api23Impl: void requestPermissions(android.app.Activity,java.lang.String[],int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationDetails from(java.util.Map)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setSignalTDSCDMA(com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()
androidx.window.layout.SidecarCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)
androidx.work.ListenableWorker$Result$Retry: ListenableWorker$Result$Retry()
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getCPU_ABI()
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle,android.app.Notification$MessagingStyle$Message)
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: void setCsiRsrq(int)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: DateTimeComponents(java.lang.String,int)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int getRssi()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getMANUFACTURER()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setDISPLAY(java.lang.String)
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
androidx.work.Operation$State: Operation$State()
androidx.window.core.Bounds: int getRight()
androidx.window.embedding.EmptyEmbeddingComponent: void setSplitInfoCallback(java.util.function.Consumer)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE getLte()
androidx.window.embedding.SplitRule: int getMinSmallestWidth()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: java.lang.Integer getPci()
fr.bmartel.speedtest.model.SpeedTestError: fr.bmartel.speedtest.model.SpeedTestError valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSsRsrq(int)
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setGroupSummary(android.app.Notification$Builder,boolean)
androidx.core.view.ViewCompat$Api28Impl: java.lang.Object requireViewById(android.view.View,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCdmaRssi(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBandwidth(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int getRscp()
androidx.window.core.Version: Version(int,int,int,java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void registerIn(android.app.Activity)
androidx.core.view.ViewCompat$Api21Impl: boolean isNestedScrollingEnabled(android.view.View)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setEnb(java.lang.Integer)
androidx.window.embedding.ExtensionEmbeddingBackend: boolean isSplitSupported()
com.sumanrajpathak.flutter_cell_info.models.common.Network: java.lang.String getIso()
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer getBcc()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getMODEL()
androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()
androidx.window.embedding.ActivityFilter: boolean equals(java.lang.Object)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: long id()
androidx.core.app.NotificationManagerCompat$Api24Impl: int getImportance(android.app.NotificationManager)
fr.bmartel.speedtest.model.SpeedTestMode: fr.bmartel.speedtest.model.SpeedTestMode valueOf(java.lang.String)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)
androidx.core.app.NotificationCompat$InboxStyle$Api16Impl: android.app.Notification$InboxStyle createInboxStyle(android.app.Notification$Builder)
androidx.core.view.ViewCompat$Api16Impl: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)
androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)
androidx.work.impl.utils.NetworkApi21: void unregisterNetworkCallbackCompat(android.net.ConnectivityManager,android.net.ConnectivityManager$NetworkCallback)
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setCgi(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: SignalTDSCDMA()
androidx.core.view.ViewCompat$Api28Impl: void setAutofillId(android.view.View,android.view.autofill.AutofillId)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getCsiRsrp()
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannel(android.app.NotificationManager,android.app.NotificationChannel)
kotlinx.coroutines.EventLoopImplBase: EventLoopImplBase()
androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean)
com.sumanrajpathak.flutter_cell_info.models.common.Cell: Cell()
com.dexterous.flutterlocalnotifications.models.ScheduleMode: boolean useExactAlarm()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: NotificationChannelDetails()
androidx.window.embedding.SplitInfo: float getSplitRatio()
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: void setEvdoRssi(int)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
com.sumanrajpathak.flutter_cell_info.models.cdma.CellCDMA: com.sumanrajpathak.flutter_cell_info.models.common.Band getBand()
android.support.v4.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSound(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
com.sumanrajpathak.flutter_cell_info.models.common.Cell: void setType(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: com.sumanrajpathak.flutter_cell_info.models.tdscdma.BandTDSCDMA getBandTDSCDMA()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void finalize()
io.flutter.embedding.android.FlutterView: void setVisibility(int)
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: void setCdmaRssi(int)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE getSignalLTE()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
androidx.work.ExistingPeriodicWorkPolicy: androidx.work.ExistingPeriodicWorkPolicy valueOf(java.lang.String)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: ExtensionWindowLayoutInfoBackend(androidx.window.extensions.layout.WindowLayoutComponent)
com.sumanrajpathak.flutter_cell_info.models.SIMInfoResponse: void setSimInfoList(java.util.List)
androidx.core.app.AlarmManagerCompat$Api21Impl: android.app.AlarmManager$AlarmClockInfo createAlarmClockInfo(long,android.app.PendingIntent)
androidx.core.app.RemoteInput$Api29Impl: android.app.RemoteInput$Builder setEditChoicesBeforeSending(android.app.RemoteInput$Builder,int)
androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)
androidx.window.embedding.SplitPairFilter: java.lang.String toString()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA getBandWCDMA()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedSchedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder addRemoteInput(android.app.Notification$Action$Builder,android.app.RemoteInput)
androidx.core.location.LocationCompat$Api26Impl: boolean hasBearingAccuracy(android.location.Location)
androidx.core.view.WindowInsetsCompat$Impl20: boolean isVisible(int)
androidx.work.Data: Data()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader33()
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
androidx.lifecycle.ViewModelStore: ViewModelStore()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
kotlin.jvm.internal.ReflectionFactory: ReflectionFactory()
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: java.lang.Integer getTac()
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder addAction(android.app.Notification$Builder,android.app.Notification$Action)
id.flutter.flutter_background_service.BackgroundService: android.os.IBinder onBind(android.content.Intent)
androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getArfcn()
androidx.window.embedding.EmbeddingBackend: boolean isSplitSupported()
androidx.work.ExistingWorkPolicy: androidx.work.ExistingWorkPolicy valueOf(java.lang.String)
androidx.window.core.Bounds: Bounds(int,int,int,int)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle forOngoingCall(android.app.Person,android.app.PendingIntent)
com.sumanrajpathak.flutter_cell_info.models.wcdma.BandWCDMA: int getDownlinkUarfcn()
androidx.work.impl.background.systemjob.SystemJobService$Api28Impl: android.net.Network getNetwork(android.app.job.JobParameters)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
com.sumanrajpathak.flutter_cell_info.models.SIMInfoResponse: java.util.List getSimInfoList()
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getDefault()
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer valueOf(java.lang.String)
androidx.core.location.LocationCompat$Api26Impl: void removeVerticalAccuracy(android.location.Location)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: void setRssi(int)
id.flutter.flutter_background_service.Config: boolean isForeground()
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: SidecarCompat$FirstAttachAdapter(androidx.window.layout.SidecarCompat,android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setLatitude(java.lang.Double)
androidx.core.view.WindowInsetsCompat$Impl21: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
androidx.core.text.ICUCompat$Api24Impl: android.icu.util.ULocale forLocale(java.util.Locale)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getCi()
androidx.window.embedding.ActivityStack: boolean isEmpty()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
androidx.work.impl.foreground.SystemForegroundService$Api29Impl: void startForeground(android.app.Service,int,android.app.Notification,int)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setBcc(java.lang.Integer)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
androidx.window.core.Version: int compareTo(java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void releaseInternal()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: FlutterRenderer$ImageReaderSurfaceProducer(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setRsrpAsu(int)
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setCqi(int)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getBandwidth()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setRnc(java.lang.Integer)
androidx.window.layout.WindowInfoTracker$-CC: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int,int)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setDeclineButtonColorHint(android.app.Notification$CallStyle,int)
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: int getEvdoRssi()
io.flutter.plugin.platform.PlatformViewWrapper: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
androidx.core.app.ActivityCompat$Api31Impl: boolean isLaunchedFromBubble(android.app.Activity)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context)
dev.fluttercommunity.workmanager.Extractor$PossibleWorkManagerCall: dev.fluttercommunity.workmanager.Extractor$PossibleWorkManagerCall valueOf(java.lang.String)
androidx.core.location.LocationManagerCompat$Api31Impl: void requestLocationUpdates(android.location.LocationManager,java.lang.String,android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)
androidx.core.view.ViewCompat$Api19Impl: void setAccessibilityLiveRegion(android.view.View,int)
androidx.core.app.NotificationCompatBuilder$Api20Impl: java.lang.String getGroup(android.app.Notification)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
id.flutter.flutter_background_service.WatchdogReceiver: void remove(android.content.Context)
com.sumanrajpathak.flutter_cell_info.models.common.Band: void setName(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer getLac()
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: AbstractResolvableFuture$Waiter()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.AlarmManager getAlarmManager(android.content.Context)
id.flutter.flutter_background_service.R$layout: R$layout()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: ScheduledNotificationRepeatFrequency(java.lang.String,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getUser_id()
androidx.window.embedding.ExtensionEmbeddingBackend: void getSplitChangeCallbacks$annotations()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.core.Version: int getMinor()
com.sumanrajpathak.flutter_cell_info.models.common.Cell: java.lang.String getConnectionStatus()
com.sumanrajpathak.flutter_cell_info.models.gsm.BandGSM: void setArfcn(int)
androidx.core.app.RemoteInput$Api20Impl: android.os.Bundle getResultsFromIntent(android.content.Intent)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getNcc()
androidx.work.BackoffPolicy: androidx.work.BackoffPolicy[] values()
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: void onReceive(android.content.Context,android.content.Intent)
com.baseflow.geolocator.location.LocationAccuracy: com.baseflow.geolocator.location.LocationAccuracy[] values()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void maybeWaitOnFence(android.media.Image)
androidx.room.RoomDatabase$Callback: RoomDatabase$Callback()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void show(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.ViewCompat$Api16Impl: int getMinimumWidth(android.view.View)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setAllowSystemGeneratedContextualActions(android.app.Notification$Builder,boolean)
androidx.window.core.Version$bigInteger$2: Version$bigInteger$2(androidx.window.core.Version)
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.nr.CellNR getNr()
com.sumanrajpathak.flutter_cell_info.models.CellsTypeList: java.util.List getPrimaryCellList()
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setCategory(android.app.Notification$Builder,java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api24Impl: android.app.Notification$MessagingStyle$Message setData(android.app.Notification$MessagingStyle$Message,java.lang.String,android.net.Uri)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLargeIconInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder createBuilder(android.content.Context,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationCompat$MessagingStyle$Message createMessage(android.content.Context,com.dexterous.flutterlocalnotifications.models.MessageDetails)
androidx.window.core.Version$Companion: Version$Companion()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setUSER(java.lang.String)
androidx.core.location.LocationCompat$Api26Impl: void removeSpeedAccuracy(android.location.Location)
androidx.core.app.NotificationCompatBuilder$Api17Impl: android.app.Notification$Builder setShowWhen(android.app.Notification$Builder,boolean)
androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setSignal(com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE)
com.sumanrajpathak.flutter_cell_info.models.common.Cell: void setConnectionStatus(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: java.lang.Integer getCid()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(androidx.core.util.Consumer)
com.sumanrajpathak.flutter_cell_info.models.common.Signal: int getDbm()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: CellWCDMA()
com.sumanrajpathak.flutter_cell_info.models.common.Cell: java.lang.String getType()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
com.google.android.gms.auth.api.signin.RevocationBoundService: RevocationBoundService()
androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
kotlin.jvm.internal.CallableReference: java.util.List getParameters()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
dev.fluttercommunity.workmanager.TaskType: dev.fluttercommunity.workmanager.TaskType valueOf(java.lang.String)
androidx.window.embedding.SplitPairRule: boolean getFinishSecondaryWithPrimary()
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.EmbeddingAdapter: EmbeddingAdapter()
androidx.window.layout.SidecarWindowBackend: boolean isActivityRegistered(android.app.Activity)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getHeight()
androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeSetIsRenderingToImageView(long,boolean)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: RuntimeTypeAdapterFactory(java.lang.Class,java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setTac(java.lang.Integer)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onCancel(java.lang.Object)
androidx.core.app.ActivityCompat$Api16Impl: void startIntentSenderForResult(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
androidx.core.app.NotificationManagerCompat$Api26Impl: android.app.NotificationChannel getNotificationChannel(android.app.NotificationManager,java.lang.String)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
androidx.window.core.Bounds: int getHeight()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA getSignalTDSCDMA()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer getLac()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer getCallback()
androidx.window.layout.FoldingFeature$State: java.lang.String toString()
androidx.window.embedding.EmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
androidx.core.location.LocationRequestCompat$Api31Impl: android.location.LocationRequest toLocationRequest(androidx.core.location.LocationRequestCompat)
androidx.window.embedding.ExtensionEmbeddingBackend: void setEmbeddingExtension(androidx.window.embedding.EmbeddingInterfaceCompat)
kotlinx.coroutines.YieldContext: YieldContext()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: NotificationDetails()
androidx.media.AudioAttributesImplBase: AudioAttributesImplBase()
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.String getCgi()
androidx.core.view.WindowInsetsCompat$Impl: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Action$Builder createBuilder(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getEcio()
kotlin.jvm.internal.FunctionReference: FunctionReference(int)
androidx.window.core.Bounds: int getBottom()
com.sumanrajpathak.flutter_cell_info.models.CellType: java.lang.String getType()
androidx.core.app.AppOpsManagerCompat$Api29Impl: int checkOpNoThrow(android.app.AppOpsManager,java.lang.String,int,java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setSignalGSM(com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM)
androidx.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
com.google.android.gms.signin.internal.zaa: zaa()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()
androidx.window.core.Bounds: android.graphics.Rect toRect()
kotlin.jvm.internal.FunctionReference: java.lang.String toString()
androidx.core.content.ContextCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String access$000(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String)
io.flutter.view.TextureRegistry$SurfaceProducer: int getWidth()
androidx.core.app.NotificationCompat$Style$Api24Impl: void setChronometerCountDown(android.widget.RemoteViews,int,boolean)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEci(java.lang.Integer)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)
androidx.core.text.ICUCompat$Api24Impl: java.lang.String getScript(java.lang.Object)
androidx.core.app.NotificationCompatBuilder$Api28Impl: android.app.Notification$Action$Builder setSemanticAction(android.app.Notification$Action$Builder,int)
androidx.core.view.WindowInsetsCompat$Impl30: void copyRootViewBounds(android.view.View)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: CellTDSCDMA()
id.flutter.flutter_background_service.Config: int getForegroundNotificationId()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Integer getSid()
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
com.sumanrajpathak.flutter_cell_info.models.lte.BandLTE: BandLTE()
io.flutter.embedding.engine.loader.FlutterLoader: FlutterLoader()
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: FlutterFirebaseCoreRegistrar()
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: void setBandNR(com.sumanrajpathak.flutter_cell_info.models.nr.BandNR)
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
androidx.core.app.NotificationCompatBuilder$Api16Impl: android.app.Notification$Builder setPriority(android.app.Notification$Builder,int)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setDownlinkUarfcn(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int getDrawableResourceId(android.content.Context,java.lang.String)
androidx.window.layout.SidecarCompat: void unregisterComponentCallback(android.app.Activity)
com.sumanrajpathak.flutter_cell_info.models.common.Band: int getNumber()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getSsSinr()
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api28Impl: android.os.Parcelable castToParcelable(android.app.Person)
androidx.fragment.app.FragmentTransaction$Op: FragmentTransaction$Op()
androidx.work.impl.background.systemalarm.Alarms$Api19Impl: void setExact(android.app.AlarmManager,int,long,android.app.PendingIntent)
androidx.window.embedding.SplitPairFilter: int hashCode()
com.sumanrajpathak.flutter_cell_info.models.CellType: com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA getTdscdma()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: void setRsrq(double)
androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy[] values()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRscp(int)
androidx.core.app.NotificationCompat$MessagingStyle$Api16Impl: android.app.Notification$BigTextStyle createBigTextStyle(android.app.Notification$Builder)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setCanScheduleExactNotifications(io.flutter.plugin.common.MethodChannel$Result)
com.sumanrajpathak.flutter_cell_info.models.cdma.SignalCDMA: void setCdmaEcio(double)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setUser_id(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
androidx.window.embedding.SplitRule: float getSplitRatio()
dev.fluttercommunity.workmanager.WorkManagerCall$RegisterTask: WorkManagerCall$RegisterTask()
androidx.work.impl.background.systemalarm.ConstraintProxyUpdateReceiver: ConstraintProxyUpdateReceiver()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setSystemWindowInsets(androidx.core.graphics.Insets)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.SignalTDSCDMA: int getRscp()
cz.mroczis.netmonster.core.db.model.NetworkType: NetworkType()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void registerPlugin(java.lang.String,io.flutter.plugins.firebase.core.FlutterFirebasePlugin)
com.sumanrajpathak.flutter_cell_info.models.nr.CellNR: com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR getSignalNR()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setPsc(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int getEcno()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelNotification(java.lang.Integer,java.lang.String)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: boolean isServiceRunning()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
androidx.core.graphics.drawable.IconCompat$Api28Impl: android.net.Uri getUri(java.lang.Object)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setPublicVersion(android.app.Notification$Builder,android.app.Notification)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setMnc(java.lang.String)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] $values()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
androidx.core.view.WindowInsetsCompat$Impl: int hashCode()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBitErrorRate(int)
androidx.core.app.RemoteInput$Api29Impl: int getEditChoicesBeforeSending(java.lang.Object)
androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: FlutterLocalNotificationsPlugin()
androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)
fr.bmartel.speedtest.model.ComputationMethod: fr.bmartel.speedtest.model.ComputationMethod valueOf(java.lang.String)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getEcno()
com.baseflow.geolocator.location.LocationAccuracyStatus: com.baseflow.geolocator.location.LocationAccuracyStatus[] values()
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)
androidx.core.view.ViewCompat$Api16Impl: void postInvalidateOnAnimation(android.view.View,int,int,int,int)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()
androidx.core.view.ViewCompat$Api23Impl: int getScrollIndicators(android.view.View)
androidx.core.view.WindowInsetsCompat$Impl28: int hashCode()
dev.fluttercommunity.workmanager.TaskType: dev.fluttercommunity.workmanager.TaskType[] values()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onImage(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage)
kotlin.jvm.internal.CallableReference: java.lang.Object callBy(java.util.Map)
androidx.window.embedding.ActivityFilter: ActivityFilter(android.content.ComponentName,java.lang.String)
androidx.work.impl.utils.NetworkApi24: void registerDefaultNetworkCallbackCompat(android.net.ConnectivityManager,android.net.ConnectivityManager$NetworkCallback)
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: java.lang.Integer getCid()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getRssiAsu()
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
androidx.core.location.LocationManagerCompat$Api19Impl: boolean tryRequestLocationUpdates(android.location.LocationManager,java.lang.String,androidx.core.location.LocationRequestCompat,androidx.core.location.LocationManagerCompat$LocationListenerTransport)
com.sumanrajpathak.flutter_cell_info.models.wcdma.CellWCDMA: void setLac(java.lang.Integer)
androidx.core.location.LocationCompat$Api26Impl: float getBearingAccuracyDegrees(android.location.Location)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class access$100(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
androidx.core.app.ActivityCompat$Api31Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getSsRsrpAsu()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
com.aledev.network_type_reachability.NetworkState: com.aledev.network_type_reachability.NetworkState valueOf(java.lang.String)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KType getReturnType()
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
androidx.core.location.LocationCompat$Api26Impl: void setVerticalAccuracyMeters(android.location.Location,float)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation getDefaultStyleInformation(java.util.Map)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: void setEcno(int)
com.sumanrajpathak.flutter_cell_info.models.wcdma.SignalWCDMA: int getEcio()
androidx.core.view.WindowInsetsCompat$Impl: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
androidx.window.layout.DisplayCompatHelperApi28: DisplayCompatHelperApi28()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getSsRsrp()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()
androidx.window.R$styleable: R$styleable()
androidx.core.app.NotificationCompat$MessagingStyle$Api16Impl: android.app.Notification$BigTextStyle setBigContentTitle(android.app.Notification$BigTextStyle,java.lang.CharSequence)
androidx.window.embedding.EmbeddingCompat: void setSplitRules(java.util.Set)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void release()
androidx.core.location.LocationManagerCompat$Api19Impl: boolean tryRequestLocationUpdates(android.location.LocationManager,java.lang.String,androidx.core.location.LocationRequestCompat,androidx.core.location.LocationListenerCompat,android.os.Looper)
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setCpid(java.lang.Integer)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
androidx.window.layout.HardwareFoldingFeature: boolean equals(java.lang.Object)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBandChannelNumber(int)
com.sumanrajpathak.flutter_cell_info.models.gsm.SignalGSM: int getBitErrorRate()
com.dexterous.flutterlocalnotifications.ActionBroadcastReceiver: ActionBroadcastReceiver()
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: java.lang.String getSubscriptionInfoNumber()
com.sumanrajpathak.flutter_cell_info.models.SIMInfo: void setSubscriptionInfoNumber(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: ExtensionEmbeddingBackend$SplitListenerWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void access$800(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer,android.media.ImageReader)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setOSVERSION(java.lang.String)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion()
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomBigContentView(android.app.Notification$Builder,android.widget.RemoteViews)
androidx.window.layout.ExtensionInterfaceCompat: boolean validateExtensionInterface()
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api28Impl: android.app.Notification$MessagingStyle$Message createMessage(java.lang.CharSequence,long,android.app.Person)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)
androidx.core.app.NotificationCompat$BigPictureStyle$Api16Impl: void setBigLargeIcon(android.app.Notification$BigPictureStyle,android.graphics.Bitmap)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
androidx.window.embedding.SplitPairFilter: boolean matchesActivityPair(android.app.Activity,android.app.Activity)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setBandDownlinkArfcn(int)
androidx.core.app.NotificationCompat$BigTextStyle$Api16Impl: android.app.Notification$BigTextStyle bigText(android.app.Notification$BigTextStyle,java.lang.CharSequence)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRnc(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setRssiAsu(int)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KVisibility getVisibility()
com.sumanrajpathak.flutter_cell_info.models.lte.CellLTE: void setPci(java.lang.Integer)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setDbm(int)
id.flutter.flutter_background_service.Config: void setManuallyStopped(boolean)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setEvdoEcio(double)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()
androidx.work.ArrayCreatingInputMerger: ArrayCreatingInputMerger()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener getImeVisibleListener()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(androidx.core.util.Consumer)
io.flutter.plugin.platform.PlatformViewWrapper: void setLayoutParams(android.widget.FrameLayout$LayoutParams)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
androidx.concurrent.futures.CallbackToFutureAdapter$Completer: CallbackToFutureAdapter$Completer()
kotlin.jvm.internal.Ref$IntRef: Ref$IntRef()
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterImageTexture(long,long,java.lang.ref.WeakReference)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)
com.google.firebase.platforminfo.LibraryVersion: LibraryVersion()
androidx.core.view.WindowInsetsCompat$Impl20: void setOverriddenInsets(androidx.core.graphics.Insets[])
com.google.gson.internal.LinkedTreeMap: LinkedTreeMap()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
com.sumanrajpathak.flutter_cell_info.models.tdscdma.CellTDSCDMA: void setCgi(java.lang.Integer)
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress: com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api16Impl: boolean getFitsSystemWindows(android.view.View)
androidx.window.embedding.SplitRule: boolean checkParentMetrics(android.view.WindowMetrics)
com.sumanrajpathak.flutter_cell_info.models.CellData: int getCsiRsrpAsu()
kotlin.jvm.internal.CallableReference: boolean isOpen()
androidx.window.layout.SidecarCompat$TranslatingCallback: SidecarCompat$TranslatingCallback(androidx.window.layout.SidecarCompat)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setContentType(android.media.AudioAttributes$Builder,int)
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$getPluginConstantsForFirebaseApp$0(com.google.firebase.FirebaseApp,com.google.android.gms.tasks.TaskCompletionSource)
androidx.core.app.NotificationCompat$DecoratedCustomViewStyle$Api16Impl: android.app.Notification$Builder setStyle(android.app.Notification$Builder,java.lang.Object)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int)
com.google.android.gms.common.api.ResultCallbacks: ResultCallbacks()
androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: InboxStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
androidx.window.embedding.SplitController: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setUsage(android.media.AudioAttributes$Builder,int)
android.support.v4.media.session.MediaControllerCompat$Callback: MediaControllerCompat$Callback()
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory[] values()
androidx.core.app.NotificationCompat$CallStyle$Api23Impl: void setLargeIcon(android.app.Notification$Builder,android.graphics.drawable.Icon)
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: java.lang.Integer getCid()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.core.location.LocationCompat$Api26Impl: float getSpeedAccuracyMetersPerSecond(android.location.Location)
androidx.core.location.LocationCompat$Api26Impl: void setSpeedAccuracyMetersPerSecond(android.location.Location,float)
com.sumanrajpathak.flutter_cell_info.models.lte.SignalLTE: SignalLTE()
com.dexterous.flutterlocalnotifications.models.MessageDetails: MessageDetails(java.lang.String,java.lang.Long,com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.String)
androidx.core.location.LocationCompat$Api26Impl: void setBearingAccuracyDegrees(android.location.Location,float)
androidx.core.os.BundleCompat$Api18Impl: void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder)
id.flutter.flutter_background_service.R$id: R$id()
id.flutter.flutter_background_service.Config: void setInitialNotificationTitle(java.lang.String)
androidx.window.embedding.SplitPairFilter: SplitPairFilter(android.content.ComponentName,android.content.ComponentName,java.lang.String)
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readProgressInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
com.sumanrajpathak.flutter_cell_info.models.CellData: void setConnectionStatus(java.lang.String)
kotlin.collections.builders.SetBuilder: SetBuilder()
com.sumanrajpathak.flutter_cell_info.models.CellData: int getEvdoRssi()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void processForegroundNotificationAction(android.content.Intent,java.util.Map)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotificationMatchingDateComponents(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.Double getLon()
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: FirebaseCommonKtxRegistrar()
com.sumanrajpathak.flutter_cell_info.models.CellData: java.lang.String getOSVERSION()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setSsRsrpAsu(int)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: WindowMetricsCalculator$Companion$overrideDecorator$1(java.lang.Object)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()
com.sumanrajpathak.flutter_cell_info.models.gsm.CellGSM: void setCgi(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedFling(android.view.View,float,float,boolean)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getTappableElementInsets()
com.sumanrajpathak.flutter_cell_info.models.nr.SignalNR: int getCsiSinr()
id.flutter.flutter_background_service.BackgroundService: void createNotificationChannel()
kotlin.jvm.internal.Lambda: int getArity()
kotlin.jvm.internal.CallableReference: java.lang.Object getBoundReceiver()
androidx.core.app.ServiceCompat$Api29Impl: void startForeground(android.app.Service,int,android.app.Notification,int)
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Builder setLargeIcon(android.app.Notification$Builder,android.graphics.drawable.Icon)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion()
com.sumanrajpathak.flutter_cell_info.models.CellData: void setCsiRsrq(int)
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
androidx.core.app.RemoteInput$Api26Impl: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()
fr.bmartel.protocol.http.states.HttpStates: fr.bmartel.protocol.http.states.HttpStates valueOf(java.lang.String)
kotlin.jvm.internal.FunctionReference: int hashCode()
